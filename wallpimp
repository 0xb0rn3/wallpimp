#!/usr/bin/env python3
"""
WallPimp - Cross-Platform Automated Wallpaper Collection Tool
Developed by 0xb0rn3 (https://github.com/0xb0rn3)
Enhanced version with improved error handling, progress tracking, and safety checks.
"""
import os
import sys
import shutil
import subprocess
import platform
from pathlib import Path
import glob
import hashlib
from concurrent.futures import ThreadPoolExecutor
from typing import List, Set
import logging
from tqdm import tqdm

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('wallpimp.log')
    ]
)

# Predefined list of wallpaper repositories
WALLPAPER_REPOS = [
    "https://github.com/dharmx/walls",
    "https://github.com/FrenzyExists/wallpapers",
    "https://github.com/Dreamer-Paul/Anime-Wallpaper",
    "https://github.com/michaelScopic/Wallpapers",
    "https://github.com/ryan4yin/wallpapers",
    "https://github.com/HENTAI-CODER/Anime-Wallpaper",
    "https://github.com/port19x/Wallpapers",
    "https://github.com/k1ng440/Wallpapers",
    "https://github.com/vimfn/walls",
    "https://github.com/expandpi/wallpapers"
]

# Extended list of supported image formats with size limits
IMAGE_FORMATS = [
    '*.jpg', '*.jpeg', '*.png', '*.gif', '*.bmp', 
    '*.webp', '*.tiff', '*.svg', '*.heic', '*.ico',
    '*.JPG', '*.JPEG', '*.PNG', '*.GIF', '*.BMP',
    '*.WEBP', '*.TIFF', '*.SVG', '*.HEIC', '*.ICO'
]

MAX_IMAGE_SIZE = 50 * 1024 * 1024  # 50MB limit
MIN_IMAGE_SIZE = 10 * 1024  # 10KB minimum

def get_file_hash(filepath: Path) -> str:
    """Calculate SHA-256 hash of a file to prevent duplicates."""
    sha256_hash = hashlib.sha256()
    with open(filepath, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def check_dependencies() -> bool:
    """
    Check if required dependencies are installed and accessible.
    Returns:
        bool: True if all dependencies are met, False otherwise
    """
    try:
        subprocess.run(['git', '--version'], 
                      check=True, 
                      capture_output=True, 
                      text=True)
        return True
    except subprocess.CalledProcessError:
        system = platform.system().lower()
        installation_instructions = {
            'windows': "Git not found! Please install Git from https://git-scm.com/download/windows",
            'linux': "\n".join([
                "Git not found! Please install using your package manager:",
                "For Ubuntu/Debian: sudo apt install git",
                "For Fedora: sudo dnf install git",
                "For Arch: sudo pacman -S git"
            ])
        }
        logging.error(installation_instructions.get(system, "Please install git for your system"))
        return False
    except Exception as e:
        logging.error(f"Error checking dependencies: {e}")
        return False

def get_default_output_folder() -> Path:
    """Returns the platform-specific default output folder path."""
    system = platform.system().lower()
    env_var = 'USERPROFILE' if system == 'windows' else 'HOME'
    return Path(os.environ.get(env_var, '')) / 'Pictures' / 'WallPimp'

def ensure_folder_permissions(folder_path: Path) -> None:
    """Set appropriate folder permissions for the current platform."""
    try:
        if platform.system().lower() != 'windows':
            os.chmod(folder_path, 0o755)
    except Exception as e:
        logging.warning(f"Could not set folder permissions: {e}")

def validate_image(filepath: Path) -> bool:
    """
    Validate image file size and format.
    Returns:
        bool: True if image is valid, False otherwise
    """
    try:
        file_size = filepath.stat().st_size
        return MIN_IMAGE_SIZE <= file_size <= MAX_IMAGE_SIZE
    except Exception as e:
        logging.warning(f"Error validating image {filepath}: {e}")
        return False

def process_repository(repo_url: str, temp_dir: Path, output_path: Path, 
                      processed_hashes: Set[str]) -> int:
    """
    Process a single repository and collect its wallpapers.
    Returns:
        int: Number of wallpapers successfully collected
    """
    repo_name = repo_url.split('/')[-1].replace('.git', '')
    repo_path = temp_dir / repo_name
    wallpapers_count = 0
    
    try:
        logging.info(f"Cloning {repo_url}...")
        subprocess.run(['git', 'clone', '--depth', '1', repo_url, str(repo_path)],
                      check=True, capture_output=True)
        
        image_files = []
        for pattern in IMAGE_FORMATS:
            image_files.extend(repo_path.glob(f"**/{pattern}"))
        
        for image_file in tqdm(image_files, desc=f"Processing {repo_name}"):
            try:
                if not validate_image(image_file):
                    continue
                    
                file_hash = get_file_hash(image_file)
                if file_hash in processed_hashes:
                    continue
                
                new_name = f"{repo_name}_{image_file.name}"
                destination = output_path / new_name
                
                shutil.copy2(image_file, destination)
                processed_hashes.add(file_hash)
                wallpapers_count += 1
                
            except Exception as e:
                logging.warning(f"Error processing {image_file.name}: {e}")
                
        return wallpapers_count
        
    except subprocess.CalledProcessError as e:
        logging.error(f"Error cloning repository {repo_name}: {e}")
        return 0
    except Exception as e:
        logging.error(f"Error processing repository {repo_name}: {e}")
        return 0

def main():
    """Main function to run the WallPimp wallpaper collection script."""
    print("""
╔═══════════════════════════════════════╗
║           WallPimp v1.1               ║
║    Developed by 0xb0rn3               ║
║    https://github.com/0xb0rn3         ║
╚═══════════════════════════════════════╝
    """)
    
    if not check_dependencies():
        sys.exit(1)
    
    output_folder = get_default_output_folder()
    output_folder.mkdir(parents=True, exist_ok=True)
    ensure_folder_permissions(output_folder)
    
    temp_dir = Path("temp_repos")
    temp_dir.mkdir(exist_ok=True)
    
    try:
        processed_hashes: Set[str] = set()
        total_wallpapers = 0
        
        with ThreadPoolExecutor(max_workers=3) as executor:
            futures = [
                executor.submit(
                    process_repository, 
                    repo_url, 
                    temp_dir, 
                    output_folder, 
                    processed_hashes
                )
                for repo_url in WALLPAPER_REPOS
            ]
            
            for future in futures:
                total_wallpapers += future.result()
                
    finally:
        logging.info("Cleaning up temporary files...")
        shutil.rmtree(temp_dir, ignore_errors=True)
    
    logging.info(f"\nWallPimp collection complete! 🎨")
    logging.info(f"Total wallpapers collected: {total_wallpapers}")
    logging.info(f"All images are saved in: {output_folder}")

if __name__ == "__main__":
    main()
