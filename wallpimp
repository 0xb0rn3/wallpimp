#!/usr/bin/env bash

# Enable strict error handling to catch potential issues early
# -e: Exit on error
# -u: Error on undefined variables
# -o pipefail: Return error if any command in a pipe fails
set -euo pipefail

# Color definitions for better visual feedback
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
BLUE='\033[0;34m'

# Print colored text for better user experience
print_color() {
    local color=$1
    local text=$2
    echo -e "${color}${text}${NC}"
}

# Function to check and install dependencies across different Linux distributions
install_dependencies() {
    local packages=("imagemagick" "git")
    local missing_packages=()
    
    # Check for missing packages
    for package in "${packages[@]}"; do
        if ! command -v "$package" &>/dev/null; then
            missing_packages+=("$package")
        fi
    done
    
    # If there are missing packages, attempt to install them
    if [ ${#missing_packages[@]} -ne 0 ]; then
        print_color "$YELLOW" "Installing required packages: ${missing_packages[*]}"
        
        # Detect package manager and install packages accordingly
        if command -v apt &>/dev/null; then
            # Debian/Ubuntu based systems
            sudo apt update && sudo apt install -y "${missing_packages[@]}"
        elif command -v dnf &>/dev/null; then
            # Fedora/RHEL based systems
            sudo dnf install -y "${missing_packages[@]}"
        elif command -v pacman &>/dev/null; then
            # Arch Linux based systems
            sudo pacman -Sy --noconfirm "${missing_packages[@]}"
        elif command -v zypper &>/dev/null; then
            # OpenSUSE based systems
            sudo zypper install -y "${missing_packages[@]}"
        else
            print_color "$RED" "Error: Unsupported package manager. Please install manually: ${missing_packages[*]}"
            exit 1
        fi
    fi
}

# Enhanced loading animation with error handling
show_loader() {
    local pid=$1
    local message=$2
    local symbols=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
    local delay=0.1
    
    # Continue animation while process is running
    while kill -0 "$pid" 2>/dev/null; do
        for symbol in "${symbols[@]}"; do
            echo -ne "\r$message [$symbol]"
            sleep $delay
        done
    done
    
    # Wait for process to finish and check exit status
    wait "$pid"
    local exit_status=$?
    if [ $exit_status -eq 0 ]; then
        echo -e "\r$message [${GREEN}✓${NC}]"
    else
        echo -e "\r$message [${RED}✗${NC}]"
        return 1
    fi
}

# Comprehensive list of wallpaper repositories
# Each repository is verified to contain appropriate wallpaper content
REPOS=(
    "https://github.com/dharmx/walls"
    "https://github.com/FrenzyExists/wallpapers"
    "https://github.com/michaelScopic/Wallpapers"
    "https://github.com/ryan4yin/wallpapers"
    "https://github.com/port19x/Wallpapers"
    "https://github.com/vimfn/walls"
    "https://github.com/expandpi/wallpapers"
    "https://github.com/D3Ext/aesthetic-wallpapers"
    "https://github.com/makccr/wallpapers"
    "https://github.com/elementary/wallpapers"
)

# Function to display a progress bar
show_progress() {
    local current=$1
    local total=$2
    local width=50
    local percentage=$((current * 100 / total))
    local filled=$((percentage * width / 100))
    local empty=$((width - filled))
    
    printf "\rProgress: ["
    printf "%${filled}s" "" | tr ' ' '█'
    printf "%${empty}s" "" | tr ' ' '.'
    printf "] %d%%" "$percentage"
}

# Enhanced download function with retry mechanism
download_repo() {
    local repo=$1
    local target=$2
    local max_retries=3
    local retry=0
    
    while [ $retry -lt $max_retries ]; do
        if git clone --depth 1 "$repo" "$target" 2>/dev/null; then
            return 0
        fi
        ((retry++))
        if [ $retry -lt $max_retries ]; then
            print_color "$YELLOW" "\rRetrying download... (Attempt $((retry + 1))/$max_retries)"
            sleep 2
        fi
    done
    return 1
}

# Improved image processing function with better error handling
process_image() {
    local file=$1
    local destination=$2
    
    # Verify file exists and is readable
    if [ ! -r "$file" ]; then
        return 1
    fi
    
    # Check if it's a valid image file using ImageMagick's identify
    if identify "$file" &>/dev/null; then
        # Generate hash for deduplication
        local hash
        hash=$(sha256sum "$file" | cut -d' ' -f1)
        local filename
        filename=$(basename "$file")
        local ext
        ext=$(echo "${filename##*.}" | tr '[:upper:]' '[:lower:]')
        
        # Skip if hash already exists (avoid duplicates)
        if ! find "$destination" -type f -exec sha256sum {} \; | grep -q "^$hash"; then
            case "$ext" in
                jpg|jpeg|png|gif|webp)
                    # Copy supported formats directly
                    cp "$file" "$destination/${hash}_${filename}"
                    ;;
                *)
                    # Convert other formats to PNG
                    convert "$file" "$destination/${hash}_${filename%.*}.png"
                    ;;
            esac
            return 0
        fi
    fi
    return 1
}

# Function to cleanup temporary files
cleanup() {
    if [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"
    fi
}

# Register cleanup function to run on script exit
trap cleanup EXIT

# Main script execution starts here

# Display welcome message
clear
cat << "EOF"
╔═══════════════════════════════════════╗
║       WallPimp V:0.5 Stable           ║
║    Wallpaper Download Assistant       ║
║    Created by: 0xb0rn3                ║
╚═══════════════════════════════════════╝
EOF

# Install required dependencies
install_dependencies

# Set up directories
DEFAULT_DIR="$HOME/Pictures/Wallpapers"
print_color "$BLUE" "\nWhere would you like to save wallpapers? [$DEFAULT_DIR]: "
read -r SAVE_DIR
SAVE_DIR=${SAVE_DIR:-$DEFAULT_DIR}
TEMP_DIR="/tmp/wallpaper_download_$$"

# Create required directories
mkdir -p "$SAVE_DIR" "$TEMP_DIR" || {
    print_color "$RED" "Error: Failed to create directories"
    exit 1
}

# Initialize counters
total_repos=${#REPOS[@]}
successful=0
failed=0
total_processed=0
duplicates=0

print_color "$BLUE" "\nStarting downloads...\n"

# Process each repository
for repo in "${REPOS[@]}"; do
    repo_name=$(basename "$repo")
    echo -n "Testing connection to $repo_name... "
    
    # Check server connection with timeout
    if ! timeout 10 git ls-remote "$repo" &>/dev/null; then
        print_color "$RED" "\rConnection failed for $repo_name [✗]"
        ((failed++))
        continue
    fi
    print_color "$GREEN" "\rConnection successful for $repo_name [✓]"
    
    # Create temporary directory for this repository
    repo_temp_dir="$TEMP_DIR/$repo_name"
    mkdir -p "$repo_temp_dir"
    
    echo -n "Downloading $repo_name... "
    if download_repo "$repo" "$repo_temp_dir" &>/dev/null & then
        show_loader $! "Downloading $repo_name" || {
            print_color "$RED" "Failed to download $repo_name"
            ((failed++))
            continue
        }
        
        echo -n "Processing images from $repo_name... "
        while IFS= read -r -d '' file; do
            if process_image "$file" "$SAVE_DIR"; then
                ((total_processed++))
                show_progress "$total_processed" 100
            else
                ((duplicates++))
            fi
        done < <(find "$repo_temp_dir" -type f -iregex '.*\.\(jpg\|jpeg\|png\|gif\|webp\|bmp\|tiff\)$' -print0)
        
        echo -e "\rFinished processing $repo_name [${GREEN}✓${NC}]"
        ((successful++))
        
        # Clean up repository directory
        rm -rf "$repo_temp_dir"
    else
        print_color "$RED" "\rDownload failed for $repo_name [✗]"
        ((failed++))
    fi
done

# Show final summary with colors
cat << EOF

╔════════ Download Summary ════════╗
║ ${GREEN}Successfully downloaded: $successful repos${NC}
║ ${RED}Failed downloads: $failed repos${NC}
║ ${BLUE}Total wallpapers processed: $total_processed${NC}
║ ${YELLOW}Duplicates skipped: $duplicates${NC}
║ ${GREEN}Wallpapers saved to: $SAVE_DIR${NC}
╚══════════════════════════════╝
EOF

exit 0
