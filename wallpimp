#!/usr/bin/env bash
# Enable error handling
set -e

# Show a simple animated loading indicator
show_loader() {
    local pid=$1
    local message=$2
    local symbols=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
    local delay=0.1

    printf "\r%s " "$message"
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        for symbol in "${symbols[@]}"; do
            printf "\r%s [%s]" "$message" "$symbol"
            sleep $delay
        done
    done
    printf "\r%s [✓]\n" "$message"
}

# Repository list
REPOS=(
    "https://github.com/dharmx/walls"
    "https://github.com/FrenzyExists/wallpapers"
    "https://github.com/Dreamer-Paul/Anime-Wallpaper"
    "https://github.com/michaelScopic/Wallpapers"
    "https://github.com/ryan4yin/wallpapers"
    "https://github.com/HENTAI-CODER/Anime-Wallpaper"
    "https://github.com/port19x/Wallpapers"
    "https://github.com/k1ng440/Wallpapers"
    "https://github.com/vimfn/walls"
    "https://github.com/expandpi/wallpapers"
    "https://github.com/polluxau/linuxnext-wallpapers"
    "https://github.com/port19x/Wallpapers"
    "https://github.com/k1ng440/Wallpapers"
    "https://github.com/HENTAI-CODER/Anime-Wallpaper"
    "https://github.com/rubenswebdev/wallpapers"
    "https://github.com/vimfn/walls"
    "https://github.com/IcePocket/Wallpapers"
    "https://github.com/expandpi/wallpapers"
    "https://github.com/logicyugi/Backgrounds"
    "https://github.com/PlannerPlus/Anime-Wallpapers"
    "https://github.com/Samyc2002/Anime-Wallpapers"
    "https://github.com/KaikSelhorst/WallpaperPack"
    "https://github.com/erickmartin890/Anime-Wallpapers"
    "https://github.com/Motif23/Wallpapers-Anime"
    "https://github.com/TherryHilaire/anime"
    "https://github.com/anmac/Wallpapers"
    "https://github.com/Fuj3l/Wallpaper"
    "https://github.com/Aluize/animewallpapers"
)

# Show welcome message
clear
echo "╔═══════════════════════════════════════╗"
echo "║         WallPimp Ver:0.4              ║"
echo "║    Wallpaper Download Assistant       ║"
echo "╚═══════════════════════════════════════╝"

# Set up directories
DEFAULT_DIR="$HOME/Pictures/Wallpapers"
echo -e "\nWhere would you like to save wallpapers? [$DEFAULT_DIR]: "
read -r SAVE_DIR
SAVE_DIR=${SAVE_DIR:-$DEFAULT_DIR}
TEMP_DIR="/tmp/wallpaper_download_$$"

# Create directories
mkdir -p "$SAVE_DIR" "$TEMP_DIR"

# Download function with retry mechanism
download_repo() {
    local repo=$1
    local target=$2
    local max_retries=3
    local retry=0
    
    while [ $retry -lt $max_retries ]; do
        if git clone --depth 1 "$repo" "$target" 2>/dev/null; then
            return 0
        fi
        ((retry++))
        if [ $retry -lt $max_retries ]; then
            echo -e "\rRetrying download... (Attempt $((retry + 1))/$max_retries)"
            sleep 2
        fi
    done
    return 1
}

# Download repositories
total_repos=${#REPOS[@]}
successful=0
failed=0

echo -e "\nStarting downloads...\n"

for repo in "${REPOS[@]}"; do
    repo_name=$(basename "$repo")
    echo -n "Pinging server for $repo_name... "
    
    # Check server connection
    if ! git ls-remote "$repo" &>/dev/null; then
        echo -e "\rServer check failed for $repo_name [✗]"
        ((failed++))
        continue
    fi
    echo -e "\rServer connection successful for $repo_name [✓]"
    
    echo -n "Downloading $repo_name... "
    if download_repo "$repo" "$TEMP_DIR/$repo_name" &>/dev/null & then
        show_loader $! "Downloading $repo_name"
        ((successful++))
    else
        echo -e "\rDownload failed for $repo_name [✗]"
        ((failed++))
    fi
done

# Process and deduplicate wallpapers
echo -e "\nProcessing wallpapers..."

# Find all image files and process them
total_processed=0
duplicates=0

find "$TEMP_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.webp" \) -print0 | while IFS= read -r -d '' file; do
    # Calculate hash
    hash=$(sha256sum "$file" | cut -d' ' -f1)
    filename=$(basename "$file")
    
    # Check if file with same hash exists
    if ! find "$SAVE_DIR" -type f -exec sha256sum {} \; | grep -q "^$hash"; then
        cp "$file" "$SAVE_DIR/${hash}_${filename}"
        ((total_processed++))
        echo -ne "\rProcessed: $total_processed files"
    else
        ((duplicates++))
    fi
done

# Cleanup
rm -rf "$TEMP_DIR"

# Show final summary
echo -e "\n\nDownload Summary:"
echo "✓ Successfully downloaded: $successful repositories"
echo "✗ Failed downloads: $failed repositories"
echo "✓ Total wallpapers processed: $total_processed"
echo "✓ Duplicates skipped: $duplicates"
echo "✓ Wallpapers saved to: $SAVE_DIR"

# Exit successfully
exit 0
