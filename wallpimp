#!/usr/bin/env bash

# Enable strict error handling
set -euo pipefail

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# Quiet output redirections
exec 3>&1
exec 1>/dev/null 2>&1

# Function to print to screen even with redirected output
print_screen() {
    echo -e "$1" >&3
}

# Enhanced loading animation
show_loader() {
    local pid=$1
    local message=$2
    local symbols=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
    local delay=0.1
    
    while kill -0 "$pid" 2>/dev/null; do
        for symbol in "${symbols[@]}"; do
            echo -ne "\r$message [$symbol]" >&3
            sleep $delay
        done
    done
    wait "$pid"
    local exit_status=$?
    if [ $exit_status -eq 0 ]; then
        echo -e "\r$message [✓]" >&3
    else
        echo -e "\r$message [✗]" >&3
        return 1
    fi
}

# Silent dependency installation
install_dependencies() {
    local packages=("imagemagick" "git")
    local missing_packages=()
    
    for package in "${packages[@]}"; do
        if ! command -v "$package" &>/dev/null; then
            missing_packages+=("$package")
        fi
    done
    
    if [ ${#missing_packages[@]} -ne 0 ]; then
        (if command -v apt &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y "${missing_packages[@]}"
        elif command -v dnf &>/dev/null; then
            sudo dnf install -y "${missing_packages[@]}"
        elif command -v pacman &>/dev/null; then
            sudo pacman -Sy --noconfirm "${missing_packages[@]}"
        elif command -v zypper &>/dev/null; then
            sudo zypper install -y "${missing_packages[@]}"
        else
            exit 1
        fi) &
        show_loader $! "Installing required packages"
    fi
}

# Repository list
REPOS=(
    "https://github.com/dharmx/walls"
    "https://github.com/FrenzyExists/wallpapers"
    "https://github.com/michaelScopic/Wallpapers"
    "https://github.com/ryan4yin/wallpapers"
    "https://github.com/port19x/Wallpapers"
    "https://github.com/D3Ext/aesthetic-wallpapers"
    "https://github.com/makccr/wallpapers"
)

# Download function with silent output
download_repo() {
    local repo=$1
    local target=$2
    git clone --depth 1 "$repo" "$target"
}

# Process image function
process_image() {
    local file=$1
    local destination=$2
    
    if [ ! -r "$file" ]; then
        return 1
    fi
    
    if identify "$file" &>/dev/null; then
        local hash
        hash=$(sha256sum "$file" | cut -d' ' -f1)
        local filename
        filename=$(basename "$file")
        local ext
        ext=$(echo "${filename##*.}" | tr '[:upper:]' '[:lower:]')
        
        if ! find "$destination" -type f -exec sha256sum {} \; | grep -q "^$hash"; then
            case "$ext" in
                jpg|jpeg|png|gif|webp)
                    cp "$file" "$destination/${hash}_${filename}"
                    ;;
                *)
                    convert "$file" "$destination/${hash}_${filename%.*}.png"
                    ;;
            esac
            return 0
        fi
    fi
    return 1
}

# Cleanup function
cleanup() {
    [ -d "$TEMP_DIR" ] && rm -rf "$TEMP_DIR"
}

trap cleanup EXIT

# Main execution starts here
clear
# Restore output temporarily for the welcome message
exec 1>&3
cat << "EOF"
╔═══════════════════════════════════════╗
║      WallPimp Ver:0.5 Stable          ║
║    Wallpaper Download Assistant       ║
║        by 0xb0rn3                     ║
╚═══════════════════════════════════════╝
EOF
# Redirect output again
exec 1>/dev/null

# Check and install dependencies silently
install_dependencies

# Setup directories
DEFAULT_DIR="$HOME/Pictures/Wallpapers"
print_screen "\nWhere would you like to save wallpapers? [$DEFAULT_DIR]: "
read -r SAVE_DIR
SAVE_DIR=${SAVE_DIR:-$DEFAULT_DIR}
TEMP_DIR="/tmp/wallpaper_download_$$"

mkdir -p "$SAVE_DIR" "$TEMP_DIR"

# Initialize counters
total_repos=${#REPOS[@]}
successful=0
failed=0
total_processed=0
duplicates=0

print_screen "\nStarting downloads...\n"

for repo in "${REPOS[@]}"; do
    repo_name=$(basename "$repo")
    
    # Test connection
    (timeout 10 git ls-remote "$repo") &
    if ! show_loader $! "Testing connection to $repo_name"; then
        ((failed++))
        continue
    fi
    
    repo_temp_dir="$TEMP_DIR/$repo_name"
    mkdir -p "$repo_temp_dir"
    
    # Download repository
    (download_repo "$repo" "$repo_temp_dir") &
    if ! show_loader $! "Downloading $repo_name"; then
        ((failed++))
        continue
    fi
    
    # Process images
    while IFS= read -r -d '' file; do
        if process_image "$file" "$SAVE_DIR"; then
            ((total_processed++))
        else
            ((duplicates++))
        fi
    done < <(find "$repo_temp_dir" -type f -iregex '.*\.\(jpg\|jpeg\|png\|gif\|webp\|bmp\|tiff\)$' -print0)
    
    print_screen "Processed $total_processed files from $repo_name [✓]"
    ((successful++))
    rm -rf "$repo_temp_dir"
done

# Show final summary
print_screen "
╔════════ Download Summary ════════╗
║ Successfully downloaded: $successful repos
║ Failed downloads: $failed repos
║ Total wallpapers processed: $total_processed
║ Duplicates skipped: $duplicates
║ Wallpapers saved to: $SAVE_DIR
╚══════════════════════════════╝"

exit 0
