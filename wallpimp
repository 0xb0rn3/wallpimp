#!/usr/bin/env bash
sudo apt install imagemagick > /dev/null/ 2>&1
# Enable error handling
set -e

# Show a simple animated loading indicator with improved visibility
show_loader() {
    local pid=$1
    local message=$2
    local symbols=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
    local delay=0.1

    printf "\r%s " "$message"
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        for symbol in "${symbols[@]}"; do
            printf "\r%s [%s]" "$message" "$symbol"
            sleep $delay
        done
    done
    printf "\r%s [✓]\n" "$message"
}

# Repository list
REPOS=(
    "https://github.com/dharmx/walls"
    "https://github.com/FrenzyExists/wallpapers"
    "https://github.com/Dreamer-Paul/Anime-Wallpaper"
    "https://github.com/michaelScopic/Wallpapers"
    "https://github.com/ryan4yin/wallpapers"
    "https://github.com/HENTAI-CODER/Anime-Wallpaper"
    "https://github.com/port19x/Wallpapers"
    "https://github.com/k1ng440/Wallpapers"
    "https://github.com/vimfn/walls"
    "https://github.com/expandpi/wallpapers"
    "https://github.com/polluxau/linuxnext-wallpapers"
    "https://github.com/port19x/Wallpapers"
    "https://github.com/k1ng440/Wallpapers"
    "https://github.com/HENTAI-CODER/Anime-Wallpaper"
    "https://github.com/rubenswebdev/wallpapers"
    "https://github.com/vimfn/walls"
    "https://github.com/IcePocket/Wallpapers"
    "https://github.com/expandpi/wallpapers"
    "https://github.com/logicyugi/Backgrounds"
    "https://github.com/PlannerPlus/Anime-Wallpapers"
    "https://github.com/Samyc2002/Anime-Wallpapers"
    "https://github.com/KaikSelhorst/WallpaperPack"
    "https://github.com/erickmartin890/Anime-Wallpapers"
    "https://github.com/Motif23/Wallpapers-Anime"
    "https://github.com/TherryHilaire/anime"
    "https://github.com/anmac/Wallpapers"
    "https://github.com/Fuj3l/Wallpaper"
    "https://github.com/Aluize/animewallpapers"
)

# Print welcome message
clear
echo "╔═══════════════════════════════════════╗"
echo "║         WallPimp Ver:0.5              ║"
echo "║    Wallpaper Download Assistant       ║"
echo "╚═══════════════════════════════════════╝"

# Check for required commands
for cmd in git identify convert; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: Required command '$cmd' not found. Please install it first."
        [ "$cmd" = "identify" -o "$cmd" = "convert" ] && echo "These commands are part of the ImageMagick package."
        exit 1
    fi
done

# Set up directories
DEFAULT_DIR="$HOME/Pictures/Wallpapers"
echo -e "\nWhere would you like to save wallpapers? [$DEFAULT_DIR]: "
read -r SAVE_DIR
SAVE_DIR=${SAVE_DIR:-$DEFAULT_DIR}
TEMP_DIR="/tmp/wallpaper_download_$$"

# Create directories
mkdir -p "$SAVE_DIR" "$TEMP_DIR"

# Download function with retry mechanism and improved error handling
download_repo() {
    local repo=$1
    local target=$2
    local max_retries=3
    local retry=0
    
    while [ $retry -lt $max_retries ]; do
        if git clone --depth 1 "$repo" "$target" 2>/dev/null; then
            return 0
        fi
        ((retry++))
        if [ $retry -lt $max_retries ]; then
            echo -e "\rRetrying download... (Attempt $((retry + 1))/$max_retries)"
            sleep 2
        fi
    done
    return 1
}

# Function to validate and process image files
process_image() {
    local file=$1
    local destination=$2
    
    # Check if it's a valid image file
    if identify "$file" &>/dev/null; then
        # Calculate hash
        local hash=$(sha256sum "$file" | cut -d' ' -f1)
        local filename=$(basename "$file")
        local ext="${filename##*.}"
        
        # Convert to lowercase extension
        ext=$(echo "$ext" | tr '[:upper:]' '[:lower:]')
        
        # Skip if hash already exists
        if ! find "$destination" -type f -exec sha256sum {} \; | grep -q "^$hash"; then
            # Ensure proper file extension
            case "$ext" in
                jpg|jpeg|png|gif|webp)
                    cp "$file" "$destination/${hash}_${filename}"
                    return 0
                    ;;
                *)
                    # Convert other image formats to PNG
                    convert "$file" "$destination/${hash}_${filename%.*}.png"
                    return 0
                    ;;
            esac
        fi
    fi
    return 1
}

# Download repositories
total_repos=${#REPOS[@]}
successful=0
failed=0
total_processed=0
duplicates=0

echo -e "\nStarting downloads...\n"

for repo in "${REPOS[@]}"; do
    repo_name=$(basename "$repo")
    echo -n "Pinging server for $repo_name... "
    
    # Check server connection
    if ! git ls-remote "$repo" &>/dev/null; then
        echo -e "\rServer check failed for $repo_name [✗]"
        ((failed++))
        continue
    fi
    echo -e "\rServer connection successful for $repo_name [✓]"
    
    # Create temporary directory for this repository
    repo_temp_dir="$TEMP_DIR/$repo_name"
    
    echo -n "Downloading $repo_name... "
    if download_repo "$repo" "$repo_temp_dir" &>/dev/null & then
        show_loader $! "Downloading $repo_name"
        
        echo -n "Processing images from $repo_name... "
        
        # Find and process all potential image files
        while IFS= read -r -d '' file; do
            if process_image "$file" "$SAVE_DIR"; then
                ((total_processed++))
                echo -ne "\rProcessed: $total_processed files from $repo_name"
            else
                ((duplicates++))
            fi
        done < <(find "$repo_temp_dir" -type f -iregex '.*\.\(jpg\|jpeg\|png\|gif\|webp\|bmp\|tiff\)$' -print0)
        
        echo -e "\rFinished processing $repo_name [✓]"
        ((successful++))
        
        # Clean up repository directory
        rm -rf "$repo_temp_dir"
    else
        echo -e "\rDownload failed for $repo_name [✗]"
        ((failed++))
    fi
done

# Cleanup temporary directory
rm -rf "$TEMP_DIR"

# Show final summary with more detailed statistics
echo -e "\n\n╔════════ Download Summary ════════╗"
echo "║ Successfully downloaded: $successful repos"
echo "║ Failed downloads: $failed repos"
echo "║ Total wallpapers processed: $total_processed"
echo "║ Duplicates skipped: $duplicates"
echo "║ Wallpapers saved to: $SAVE_DIR"
echo "╚══════════════════════════════╝"

# Exit successfully
exit 0
