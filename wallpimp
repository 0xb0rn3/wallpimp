#!/usr/bin/env bash
# Enable error handling
set -e

# Visual elements for the UI
show_banner() {
    clear
    cat << "EOF"
╔═══════════════════════════════════════╗
║         WallPimp Ver:0.3              ║
║    Wallpaper Download Assistant       ║
╚═══════════════════════════════════════╝
EOF
}

# Enhanced progress spinner with message support
spinner() {
    local pid=$1
    local message=$2
    local delay=0.1
    local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    printf "\r%s " "$message"
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf "[%c]" "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        printf "\b\b\b"
        sleep $delay
    done
    printf "    \b\b\b\b"
}

# Progress bar function
progress_bar() {
    local current=$1
    local total=$2
    local message=$3
    local width=50
    local percentage=$((current * 100 / total))
    local filled=$((percentage * width / 100))
    local empty=$((width - filled))
    
    printf "\r%s [" "$message"
    printf "%${filled}s" '' | tr ' ' '█'
    printf "%${empty}s" '' | tr ' ' '░'
    printf "] %3d%%" "$percentage"
}

# Repository list
WALLPAPER_REPOS=(
    "https://github.com/dharmx/walls"
    "https://github.com/FrenzyExists/wallpapers"
    "https://github.com/Dreamer-Paul/Anime-Wallpaper"
    "https://github.com/michaelScopic/Wallpapers"
    "https://github.com/ryan4yin/wallpapers"
    "https://github.com/HENTAI-CODER/Anime-Wallpaper"
    "https://github.com/port19x/Wallpapers"
    "https://github.com/k1ng440/Wallpapers"
    "https://github.com/vimfn/walls"
    "https://github.com/expandpi/wallpapers"
    "https://github.com/polluxau/linuxnext-wallpapers"
    "https://github.com/port19x/Wallpapers"
    "https://github.com/k1ng440/Wallpapers"
    "https://github.com/HENTAI-CODER/Anime-Wallpaper"
    "https://github.com/rubenswebdev/wallpapers"
    "https://github.com/vimfn/walls"
    "https://github.com/IcePocket/Wallpapers"
    "https://github.com/expandpi/wallpapers"
    "https://github.com/logicyugi/Backgrounds"
    "https://github.com/PlannerPlus/Anime-Wallpapers"
    "https://github.com/Samyc2002/Anime-Wallpapers"
    "https://github.com/KaikSelhorst/WallpaperPack"
    "https://github.com/erickmartin890/Anime-Wallpapers"
    "https://github.com/Motif23/Wallpapers-Anime"
    "https://github.com/TherryHilaire/anime"
    "https://github.com/anmac/Wallpapers"
    "https://github.com/Fuj3l/Wallpaper"
    "https://github.com/Aluize/animewallpapers"
)

# Configuration
SUPPORTED_FORMATS=("jpg" "jpeg" "png" "gif" "webp")
MAX_RETRIES=3
DEFAULT_OUTPUT_DIR="$HOME/Pictures/Wallpapers"
ORGANIZED_DIRS=("abstract" "anime" "nature" "minimal" "art" "other")

# Function to create organized directory structure
create_directory_structure() {
    local base_dir="$1"
    for dir in "${ORGANIZED_DIRS[@]}"; do
        mkdir -p "$base_dir/$dir"
    done
}

# Enhanced download function with proper error handling
download_repo() {
    local repo="$1"
    local target_dir="$2"
    local attempt=1
    
    while [ $attempt -le $MAX_RETRIES ]; do
        echo -en "\rTrying to download $(basename "$repo") (Attempt $attempt/$MAX_RETRIES)"
        if git clone --depth 1 "$repo" "$target_dir" >/dev/null 2>&1; then
            echo -en "\r\033[K"  # Clear the line
            return 0
        fi
        ((attempt++))
        sleep 2
    done
    echo -en "\r\033[K"  # Clear the line
    return 1
}

# Function to categorize wallpapers based on filename and content
categorize_wallpaper() {
    local file="$1"
    local filename=$(basename "$file" | tr '[:upper:]' '[:lower:]')
    
    if [[ $filename =~ (abstract|geometry|pattern) ]]; then
        echo "abstract"
    elif [[ $filename =~ (anime|manga|character) ]]; then
        echo "anime"
    elif [[ $filename =~ (nature|landscape|mountain|forest) ]]; then
        echo "nature"
    elif [[ $filename =~ (minimal|simple|clean) ]]; then
        echo "minimal"
    elif [[ $filename =~ (art|painting|digital) ]]; then
        echo "art"
    else
        echo "other"
    fi
}

# Enhanced file processing with progress tracking
process_files() {
    local output_dir="$1"
    declare -A file_hashes
    local total_files=0
    local processed_files=0
    
    # Count total files first
    for format in "${SUPPORTED_FORMATS[@]}"; do
        total_files=$((total_files + $(find "$TEMP_DIR" -type f -iname "*.$format" | wc -l)))
    done
    
    echo -e "\nProcessing $total_files files..."
    
    # Process each supported file format
    for format in "${SUPPORTED_FORMATS[@]}"; do
        while IFS= read -r -d '' file; do
            local hash=$(sha256sum "$file" | cut -d' ' -f1)
            
            if [[ -z ${file_hashes[$hash]} ]]; then
                local filename=$(basename "$file" | tr ' ' '_' | tr -cd 'A-Za-z0-9._-')
                local category=$(categorize_wallpaper "$file")
                local target="$output_dir/$category/$filename"
                
                # Handle filename collisions
                if [[ -f "$target" ]]; then
                    local base="${filename%.*}"
                    local ext="${filename##*.}"
                    local counter=1
                    while [[ -f "$target" ]]; do
                        target="$output_dir/$category/${base}_${counter}.${ext}"
                        ((counter++))
                    done
                fi
                
                cp "$file" "$target"
                file_hashes[$hash]="$target"
            fi
            
            ((processed_files++))
            progress_bar "$processed_files" "$total_files" "Organizing wallpapers"
        done < <(find "$TEMP_DIR" -type f -iname "*.$format" -print0)
    done
    echo -e "\n"
}

# Main function
main() {
    show_banner
    
    # Create temporary directory with unique identifier
    TEMP_DIR="/tmp/wallpimp_$$"
    
    # Get output directory from user or use default
    printf "\nWallpaper save location [$DEFAULT_OUTPUT_DIR]: "
    read -r output_dir
    output_dir=${output_dir:-$DEFAULT_OUTPUT_DIR}
    
    # Create directory structure
    create_directory_structure "$output_dir"
    mkdir -p "$TEMP_DIR"
    
    # Show initial progress
    echo -e "\nInitiating wallpaper download..."
    
    # Download repositories with progress tracking
    local total_repos=${#WALLPAPER_REPOS[@]}
    local successful_repos=0
    local failed_repos=0
    
    for ((i=0; i<total_repos; i++)); do
        repo="${WALLPAPER_REPOS[i]}"
        progress_bar "$i" "$total_repos" "Downloading repositories"
        
        if download_repo "$repo" "$TEMP_DIR/$(basename "$repo")"; then
            ((successful_repos++))
        else
            ((failed_repos++))
        fi
    done
    
    echo -e "\n\nProcessing and organizing wallpapers..."
    process_files "$output_dir"
    
    # Cleanup
    echo "Cleaning up temporary files..."
    rm -rf "$TEMP_DIR"
    
    # Show completion message with statistics
    total_files=$(find "$output_dir" -type f | wc -l)
    echo -e "\n✓ Download Summary:"
    echo "  - Total wallpapers: $total_files"
    echo "  - Successful downloads: $successful_repos repositories"
    echo "  - Failed downloads: $failed_repos repositories"
    echo "  - Save location: $output_dir"
    
    # Show organization summary
    echo -e "\n✓ Wallpapers organized into categories:"
    for dir in "${ORGANIZED_DIRS[@]}"; do
        local count=$(find "$output_dir/$dir" -type f | wc -l)
        echo "  - $dir: $count files"
    done
}

# Run main function
main
