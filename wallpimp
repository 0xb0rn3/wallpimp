#!/usr/bin/env python3
"""
WallPimp - Cross-Platform Automated Wallpaper Collection Tool
Developed by 0xb0rn3 (https://github.com/0xb0rn3)

This tool automatically collects wallpapers from predefined GitHub repositories
and organizes them into a specified directory. It supports multiple image formats
and provides cross-platform compatibility for Windows and Linux systems.
"""

import os
import sys
import shutil
import subprocess
import platform
from pathlib import Path
import glob

# Predefined list of wallpaper repositories
WALLPAPER_REPOS = [
    "https://github.com/dharmx/walls",
    "https://github.com/FrenzyExists/wallpapers",
    "https://github.com/Dreamer-Paul/Anime-Wallpaper",
    "https://github.com/michaelScopic/Wallpapers",
    "https://github.com/ryan4yin/wallpapers",
    "https://github.com/HENTAI-CODER/Anime-Wallpaper",
    "https://github.com/port19x/Wallpapers",
    "https://github.com/k1ng440/Wallpapers",
    "https://github.com/vimfn/walls",
    "https://github.com/expandpi/wallpapers"
]

# Extended list of supported image formats
IMAGE_FORMATS = [
    '*.jpg', '*.jpeg', '*.png', '*.gif', '*.bmp', 
    '*.webp', '*.tiff', '*.svg', '*.heic', '*.ico',
    # Include uppercase variants
    '*.JPG', '*.JPEG', '*.PNG', '*.GIF', '*.BMP',
    '*.WEBP', '*.TIFF', '*.SVG', '*.HEIC', '*.ICO'
]

def check_dependencies():
    """
    Check if required dependencies (git) are installed and accessible.
    Provides platform-specific guidance if dependencies are missing.
    
    Returns:
        bool: True if all dependencies are met, False otherwise
    """
    try:
        # Check git installation
        subprocess.run(['git', '--version'], 
                      check=True, 
                      capture_output=True, 
                      text=True)
        return True
    except subprocess.CalledProcessError:
        system = platform.system().lower()
        if system == 'windows':
            print("Git not found! Please install Git from https://git-scm.com/download/windows")
        else:  # Linux
            print("Git not found! Please install using your package manager:")
            print("For Ubuntu/Debian: sudo apt install git")
            print("For Fedora: sudo dnf install git")
            print("For Arch: sudo pacman -S git")
        return False
    except Exception as e:
        print(f"Error checking dependencies: {e}")
        return False

def get_default_output_folder():
    """
    Returns the platform-specific default output folder path.
    
    Returns:
        Path: Default pictures folder path based on OS
    """
    system = platform.system().lower()
    
    if system == 'windows':
        # Windows: Use USERPROFILE environment variable
        return Path(os.environ.get('USERPROFILE')) / 'Pictures'
    else:
        # Linux: Use HOME environment variable
        return Path(os.environ.get('HOME')) / 'Pictures'

def ensure_folder_permissions(folder_path):
    """
    Ensures the folder has correct permissions for the current platform.
    Handles platform-specific permission settings.
    
    Args:
        folder_path (Path): Path to the folder to check/fix permissions
    """
    try:
        if platform.system().lower() != 'windows':
            # Set appropriate permissions on Linux (read/write for user)
            os.chmod(folder_path, 0o755)
    except Exception as e:
        print(f"Warning: Could not set folder permissions: {e}")

def get_output_folder():
    """
    Prompts the user to choose between default Pictures folder or custom location.
    Handles platform-specific paths and permissions.
    
    Returns:
        str: Path to the selected output folder
    """
    default_folder = get_default_output_folder()
    
    print("\nWhere would you like to save the wallpapers?")
    print(f"1. Default location ({default_folder})")
    print("2. Custom location")
    
    while True:
        choice = input("\nEnter your choice (1 or 2): ").strip()
        
        if choice == "1":
            folder_path = default_folder
            break
        elif choice == "2":
            custom_path = input("\nEnter the custom path for wallpapers: ").strip()
            # Handle both Windows and Unix-style paths
            folder_path = Path(os.path.expanduser(custom_path))
            break
        else:
            print("Please enter either 1 or 2.")
    
    try:
        # Create the folder if it doesn't exist
        folder_path.mkdir(parents=True, exist_ok=True)
        ensure_folder_permissions(folder_path)
        return str(folder_path)
    except Exception as e:
        print(f"Error creating folder: {e}")
        print(f"Falling back to default location: {default_folder}")
        default_folder.mkdir(parents=True, exist_ok=True)
        ensure_folder_permissions(default_folder)
        return str(default_folder)

def get_git_command():
    """
    Returns the appropriate git command for the current platform.
    
    Returns:
        list: Command list for subprocess
    """
    system = platform.system().lower()
    if system == 'windows':
        return ['git']  # Windows will use git from PATH
    else:
        return ['git']  # Linux will use git from PATH

def clone_and_collect_wallpapers(output_folder):
    """
    Clone predefined GitHub repositories and collect wallpapers into a single folder.
    Handles platform-specific path and command requirements.
    
    Args:
        output_folder (str): Path to the destination folder for wallpapers
    """
    # Create the output folder if it doesn't exist
    output_path = Path(output_folder)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # Create a temporary directory for cloning repositories
    temp_dir = Path("temp_repos")
    temp_dir.mkdir(exist_ok=True)
    
    total_wallpapers = 0
    git_cmd = get_git_command()
    
    try:
        # Process each repository
        for repo_url in WALLPAPER_REPOS:
            # Extract repository name from URL
            repo_name = repo_url.split('/')[-1].replace('.git', '')
            repo_path = temp_dir / repo_name
            
            print(f"\nProcessing repository: {repo_name}")
            
            try:
                # Clone the repository using platform-specific git command
                print(f"Cloning {repo_url}...")
                subprocess.run([*git_cmd, 'clone', '--depth', '1', repo_url, str(repo_path)], 
                             check=True, 
                             capture_output=True)
                
                # Find all image files recursively
                image_files = []
                for pattern in IMAGE_FORMATS:
                    image_files.extend(repo_path.glob(f"**/{pattern}"))
                
                # Copy images to output folder
                print(f"Moving wallpapers from {repo_name}...")
                repo_wallpapers = 0
                
                for image_file in image_files:
                    # Create a unique filename to avoid conflicts
                    new_name = f"{repo_name}_{image_file.name}"
                    destination = output_path / new_name
                    
                    try:
                        # Copy the file with platform-appropriate methods
                        shutil.copy2(image_file, destination)
                        repo_wallpapers += 1
                        print(f"Copied: {new_name}")
                    except Exception as e:
                        print(f"Error copying {image_file.name}: {e}")
                
                print(f"Found {repo_wallpapers} wallpapers in {repo_name}")
                total_wallpapers += repo_wallpapers
                
            except subprocess.CalledProcessError as e:
                print(f"Error cloning repository {repo_name}: {e}")
                continue
            except Exception as e:
                print(f"Error processing repository {repo_name}: {e}")
                continue
            
    finally:
        # Clean up: remove temporary repository folders
        print("\nCleaning up temporary files...")
        try:
            shutil.rmtree(temp_dir, ignore_errors=True)
        except Exception as e:
            print(f"Warning: Error during cleanup: {e}")
        
    print(f"\nWallPimp collection complete! üé®")
    print(f"Total wallpapers collected: {total_wallpapers}")
    print(f"All images are saved in: {output_folder}")

def main():
    """
    Main function to run the WallPimp wallpaper collection script.
    Includes platform checks and appropriate setup for each OS.
    """
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           WallPimp v1.0               ‚ïë
‚ïë    Developed by 0xb0rn3               ‚ïë
‚ïë    https://github.com/0xb0rn3         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # Check system and dependencies
    system = platform.system()
    print(f"Detected operating system: {system}")
    
    if not check_dependencies():
        print("Required dependencies not met. Please install them and try again.")
        sys.exit(1)
    
    print(f"Ready to download wallpapers from {len(WALLPAPER_REPOS)} repositories.")
    
    # Get output folder path from user
    output_folder = get_output_folder()
    
    # Run the collection process
    clone_and_collect_wallpapers(output_folder)

if __name__ == "__main__":
    main()
