#!/usr/bin/env python3
# WallPimp v0.4 Alpha Stable
# Developer: 0xB0RN3 (github.com/0xb0rn3)

import sys
import hashlib
import shutil
import tempfile
import asyncio
import platform
import subprocess
import importlib
from pathlib import Path
from typing import Set, Dict
from dataclasses import dataclass
from PIL import Image
from concurrent.futures import ThreadPoolExecutor

# Dependency check and installation
QtWidgets = importlib.util.find_spec("PySide6.QtWidgets")

def install_dependencies():
    required = {'PySide6': 'pyside6', 'PIL': 'pillow'}
    missing = [pkg for imp, pkg in required.items() if importlib.util.find_spec(imp) is None]
    
    if missing:
        from PySide6.QtWidgets import QApplication, QMessageBox
        app = QApplication(sys.argv)
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Critical)
        msg.setWindowTitle("Missing Dependencies")
        msg.setText("Required packages missing. Install now?")
        msg.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        
        if msg.exec() == QMessageBox.StandardButton.Yes:
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", "--user", *missing], check=True)
                QMessageBox.information(None, "Success", "Installation complete!\nPlease restart the application.")
            except subprocess.CalledProcessError as e:
                QMessageBox.critical(None, "Error", f"Install failed:\n{e.stderr or e}")
        sys.exit()

if not QtWidgets:
    install_dependencies()

# GUI imports
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QLabel, QProgressBar, QPushButton, QFileDialog, QCheckBox, QGroupBox,
    QScrollArea, QMessageBox, QSizePolicy, QMenuBar, QMenu
)
from PySide6.QtCore import Qt, QThreadPool, QRunnable, Signal, QObject
from PySide6.QtGui import QAction, QFont, QPalette, QColor

@dataclass
class DownloadStats:
    successful_repos: int = 0
    failed_repos: int = 0
    total_processed: int = 0
    duplicates: int = 0

class WorkerSignals(QObject):
    repo_started = Signal(dict)
    repo_finished = Signal(dict, bool)
    error = Signal(str)
    finished = Signal()

class WallpaperWorker(QRunnable):
    def __init__(self, repos, save_dir):
        super().__init__()
        self.repos = repos
        self.save_dir = save_dir
        self.signals = WorkerSignals()
        self._is_running = True
        self.processed_hashes: Set[str] = set()
        self.supported_formats = {'.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.png', '.tiff'}

    def run(self):
        asyncio.run(self._run())

    async def _run(self):
        temp_dir = Path(tempfile.mkdtemp())
        try:
            for repo in self.repos:
                if not self._is_running: break
                self.signals.repo_started.emit(repo)
                success = await self.download_repo(repo, temp_dir)
                self.signals.repo_finished.emit(repo, success)
            self.signals.finished.emit()
        except Exception as e:
            self.signals.error.emit(str(e))
        finally:
            shutil.rmtree(temp_dir, ignore_errors=True)

    async def download_repo(self, repo, temp_dir):
        repo_name = repo['url'].split('/')[-1]
        repo_path = temp_dir / repo_name
        try:
            process = await asyncio.create_subprocess_exec(
                'git', 'clone', '--depth', '1', '--branch', repo['branch'], repo['url'], str(repo_path)
            )
            await process.wait()
            return process.returncode == 0 and await self.process_directory(repo_path)
        except Exception:
            return False

    async def process_directory(self, source_dir):
        with ThreadPoolExecutor() as executor:
            tasks = [
                asyncio.get_event_loop().run_in_executor(executor, self.process_image, file_path)
                for file_path in source_dir.rglob('*') 
                if file_path.suffix.lower() in self.supported_formats
            ]
            await asyncio.gather(*tasks)

    def process_image(self, source):
        try:
            with open(source, 'rb') as f:
                file_hash = hashlib.sha256(f.read()).hexdigest()
            if file_hash in self.processed_hashes:
                return False
            with Image.open(source) as img:
                if img.size < (1920, 1080):
                    return False
                output_path = self.save_dir / f"{file_hash}{source.suffix}"
                img.save(output_path, quality=95)
                self.processed_hashes.add(file_hash)
                return True
        except Exception:
            return False

    def stop(self):
        self._is_running = False

class WallpaperGUI(QMainWindow):
    REPOSITORIES = [
        {'name': 'Minimalist', 'url': 'https://github.com/dharmx/walls', 'branch': 'main', 'icon': '🖼️', 'desc': 'Clean minimalist designs'},
        {'name': 'Anime', 'url': 'https://github.com/HENTAI-CODER/Anime-Wallpaper', 'branch': 'main', 'icon': '🌸', 'desc': 'Anime & manga artwork'},
        {'name': 'Nature', 'url': 'https://github.com/FrenzyExists/wallpapers', 'branch': 'main', 'icon': '🌿', 'desc': 'Nature landscapes'},
        {'name': 'Scenic', 'url': 'https://github.com/michaelScopic/Wallpapers', 'branch': 'main', 'icon': '🏞️', 'desc': 'Scenic vistas'},
        {'name': 'Artistic', 'url': 'https://github.com/D3Ext/aesthetic-wallpapers', 'branch': 'main', 'icon': '🎨', 'desc': 'Artistic styles'},
        {'name': 'Anime Pack', 'url': 'https://github.com/Dreamer-Paul/Anime-Wallpaper', 'branch': 'main', 'icon': '🎎', 'desc': 'Curated anime art'},
        {'name': 'Linux', 'url': 'https://github.com/polluxau/linuxnext-wallpapers', 'branch': 'main', 'icon': '🐧', 'desc': 'Linux desktop art'},
        {'name': 'Mixed', 'url': 'https://github.com/makccr/wallpapers', 'branch': 'main', 'icon': '🌟', 'desc': 'Diverse styles'},
        {'name': 'Desktop', 'url': 'https://github.com/port19x/Wallpapers', 'branch': 'main', 'icon': '💻', 'desc': 'Minimalist desktop'},
        {'name': 'Gaming', 'url': 'https://github.com/ryan4yin/wallpapers', 'branch': 'main', 'icon': '🎮', 'desc': 'Gaming-inspired art'},
        {'name': 'Photos', 'url': 'https://github.com/linuxdotexe/wallpapers', 'branch': 'main', 'icon': '📷', 'desc': 'Professional photography'},
        {'name': 'Digital', 'url': 'https://github.com/0xb0rn3/wallpapers', 'branch': 'main', 'icon': '🖥️', 'desc': 'Digital creations'}
    ]

    def __init__(self):
        super().__init__()
        self.worker = None
        self.thread_pool = QThreadPool()
        self.init_ui()
        self.setWindowTitle("WallPimp v0.4 Alpha Stable")
        self.setMinimumSize(800, 600)
        self.setStyleSheet("""
            QMainWindow { background-color: #f8f9fa; }
            QGroupBox { 
                border: 1px solid #dee2e6;
                border-radius: 6px;
                margin-top: 1ex;
                font-size: 13px;
                color: #2d3436;
            }
            QProgressBar { 
                height: 20px;
                border-radius: 4px;
                border: 1px solid #ced4da;
            }
            QProgressBar::chunk { 
                background-color: #4dabf7;
                border-radius: 3px;
            }
            QCheckBox { 
                spacing: 8px; 
                font-size: 13px;
            }
            QPushButton {
                padding: 8px 16px;
                border-radius: 4px;
                background-color: #e9ecef;
                border: 1px solid #dee2e6;
            }
            QPushButton:hover {
                background-color: #dee2e6;
            }
        """)

    def init_ui(self):
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        
        # Menu Bar
        menu_bar = QMenuBar()
        help_menu = QMenu("&Help", self)
        about_action = QAction("&About", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        menu_bar.addMenu(help_menu)
        self.setMenuBar(menu_bar)

        # Header
        header = QLabel("WallPimp - Intelligent Wallpaper Collector")
        header.setFont(QFont("Segoe UI", 16, QFont.Bold))
        header.setStyleSheet("color: #2c3e50; margin: 15px 0;")
        header.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(header)

        # Repository Grid
        repo_group = QGroupBox("Select Collections")
        repo_layout = QGridLayout()
        
        self.repo_checkboxes = []
        for i, repo in enumerate(self.REPOSITORIES):
            cb = QCheckBox(f"{repo['icon']} {repo['name']}")
            cb.setToolTip(repo['desc'])
            cb.setChecked(True)
            repo_layout.addWidget(cb, i//3, i%3)
            self.repo_checkboxes.append(cb)
        
        repo_group.setLayout(repo_layout)
        main_layout.addWidget(repo_group)

        # Progress Section
        progress_group = QGroupBox("Download Progress")
        progress_layout = QVBoxLayout()
        
        self.progress_bars = {}
        for repo in self.REPOSITORIES:
            pb = QProgressBar()
            pb.setRange(0, 100)
            pb.setFormat(f" {repo['icon']} {repo['name']}...")
            pb.setStyleSheet("font-size: 12px; color: #495057;")
            self.progress_bars[repo['name']] = pb
            progress_layout.addWidget(pb)
        
        progress_group.setLayout(progress_layout)
        main_layout.addWidget(progress_group)

        # Control Panel
        control_layout = QHBoxLayout()
        self.btn_dir = QPushButton("📁 Choose Folder")
        self.btn_dir.clicked.connect(self.choose_directory)
        
        self.dir_label = QLabel("No folder selected")
        self.dir_label.setStyleSheet("color: #6c757d; font-size: 12px;")
        
        self.btn_start = QPushButton("▶ Start Collection")
        self.btn_start.setStyleSheet("background-color: #4dabf7; color: white;")
        self.btn_start.clicked.connect(self.start_download)
        
        self.btn_stop = QPushButton("⏹ Stop")
        self.btn_stop.setStyleSheet("background-color: #ff6b6b; color: white;")
        self.btn_stop.clicked.connect(self.stop_download)
        self.btn_stop.setEnabled(False)

        control_layout.addWidget(self.btn_dir)
        control_layout.addWidget(self.dir_label)
        control_layout.addStretch()
        control_layout.addWidget(self.btn_start)
        control_layout.addWidget(self.btn_stop)
        main_layout.addLayout(control_layout)

        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)

    def show_about(self):
        about_text = """<div style='text-align: center'>
            <h3 style='color: #2c3e50;'>WallPimp v0.4 Alpha Stable</h3>
            <p>Developed by <b>0xB0RN3</b></p>
            <p>GitHub: <a href='https://github.com/0xb0rn3' style='color: #4dabf7;'>github.com/0xb0rn3</a></p>
            <hr>
            <p style='color: #6c757d;'>
                Features:<br>
                • 12+ curated collections<br>
                • Auto-deduplication<br>
                • Quality filtering (1920x1080+ only)<br>
                • Parallel processing<br>
                • Cross-platform support
            </p>
        </div>"""
        
        msg = QMessageBox(self)
        msg.setWindowTitle("About WallPimp")
        msg.setTextFormat(Qt.TextFormat.RichText)
        msg.setText(about_text)
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()

    def choose_directory(self):
        path = QFileDialog.getExistingDirectory(self, "Select Save Directory")
        if path:
            self.save_dir = Path(path)
            self.dir_label.setText(path)
            self.dir_label.setStyleSheet("color: #2c3e50; font-size: 12px;")

    def start_download(self):
        if not hasattr(self, 'save_dir'):
            QMessageBox.warning(self, "Error", "Please select a save directory first!")
            return

        selected_repos = [repo for repo, cb in zip(self.REPOSITORIES, self.repo_checkboxes) if cb.isChecked()]
        if not selected_repos:
            QMessageBox.warning(self, "Error", "Please select at least one collection!")
            return

        self.worker = WallpaperWorker(selected_repos, self.save_dir)
        self.worker.signals.repo_started.connect(self.repo_started)
        self.worker.signals.repo_finished.connect(self.repo_finished)
        self.worker.signals.error.connect(lambda e: QMessageBox.critical(self, "Error", e))
        self.worker.signals.finished.connect(self.download_finished)
        
        self.btn_start.setEnabled(False)
        self.btn_stop.setEnabled(True)
        self.thread_pool.start(self.worker)

    def repo_started(self, repo):
        self.progress_bars[repo['name']].setValue(0)

    def repo_finished(self, repo, success):
        pb = self.progress_bars[repo['name']]
        pb.setValue(100)
        pb.setStyleSheet("QProgressBar::chunk { background-color: %s; }" % 
                        ("#4CAF50" if success else "#e74c3c"))

    def stop_download(self):
        if self.worker: 
            self.worker.stop()
        self.btn_start.setEnabled(True)
        self.btn_stop.setEnabled(False)

    def download_finished(self):
        self.btn_start.setEnabled(True)
        self.btn_stop.setEnabled(False)
        QMessageBox.information(self, "Complete", "Download finished successfully!")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = WallpaperGUI()
    window.show()
    sys.exit(app.exec())
