#!/usr/bin/env bash

# Terminal styling and colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'
readonly BOLD='\033[1m'

# Repository configuration
declare -A REPOS=(
    ["Minimalist"]="https://github.com/dharmx/walls|main"
    ["Anime"]="https://github.com/HENTAI-CODER/Anime-Wallpaper|main"
    ["Nature"]="https://github.com/FrenzyExists/wallpapers|main"
    ["Scenic"]="https://github.com/michaelScopic/Wallpapers|main"
    ["Artistic"]="https://github.com/D3Ext/aesthetic-wallpapers|main"
    ["Anime Pack"]="https://github.com/Dreamer-Paul/Anime-Wallpaper|main"
    ["Linux"]="https://github.com/polluxau/linuxnext-wallpapers|main"
    ["Mixed"]="https://github.com/makccr/wallpapers|main"
    ["Desktop"]="https://github.com/port19x/Wallpapers|main"
    ["Gaming"]="https://github.com/ryan4yin/wallpapers|main"
    ["Photos"]="https://github.com/linuxdotexe/wallpapers|main"
    ["Digital"]="https://github.com/0xb0rn3/wallpapers|main"
)

# Loading animation
show_loader() {
    local pid=$1
    local message=$2
    local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    while kill -0 "$pid" 2>/dev/null; do
        local temp=${spinstr#?}
        printf "\r${CYAN}${BOLD}[%c] %s${NC}" "$spinstr" "$message"
        spinstr=$temp${spinstr%"$temp"}
        sleep 0.1
    done
    printf "\r${GREEN}${BOLD}[✓] %s${NC}\n" "$message"
}

# Progress bar
show_progress() {
    local current=$1
    local total=$2
    local width=50
    local percentage=$((current * 100 / total))
    local filled=$((percentage * width / 100))
    local empty=$((width - filled))
    printf "\r${PURPLE}${BOLD}Progress: ["
    printf "%${filled}s" | tr ' ' '█'
    printf "%${empty}s" | tr ' ' '░'
    printf "] %3d%%${NC}" "$percentage"
}

# Install dependencies
install_dependencies() {
    local os_type
    os_type=$(grep -oP '^ID=\K\w+' /etc/os-release 2>/dev/null || echo "unknown")
    
    # Check for Git
    if ! command -v git >/dev/null 2>&1; then
        echo "Installing Git..."
        case "$os_type" in
            ubuntu|debian)
                sudo apt-get update -qq && sudo apt-get install -y -qq git &
                show_loader $! "Installing Git"
                ;;
            fedora)
                sudo dnf install -y -q git &
                show_loader $! "Installing Git"
                ;;
            arch)
                sudo pacman -Syu --noconfirm git &
                show_loader $! "Installing Git"
                ;;
            *)
                echo "Unsupported OS. Please install Git manually."
                exit 1
                ;;
        esac
    fi

    # Check for ImageMagick
    if ! command -v convert >/dev/null 2>&1; then
        echo "Installing ImageMagick..."
        case "$os_type" in
            ubuntu|debian)
                sudo apt-get install -y -qq imagemagick &
                show_loader $! "Installing ImageMagick"
                ;;
            fedora)
                sudo dnf install -y -q ImageMagick &
                show_loader $! "Installing ImageMagick"
                ;;
            arch)
                sudo pacman -S --noconfirm imagemagick &
                show_loader $! "Installing ImageMagick"
                ;;
            *)
                echo "Unsupported OS. Please install ImageMagick manually."
                exit 1
                ;;
        esac
    fi
}

# Display banner
show_banner() {
    clear
    cat << "EOF"
    
    ██╗    ██╗ █████╗ ██╗     ██╗     ██████╗ ██╗███╗   ███╗██████╗ 
    ██║    ██║██╔══██╗██║     ██║     ██╔══██╗██║████╗ ████║██╔══██╗
    ██║ █╗ ██║███████║██║     ██║     ██████╔╝██║██╔████╔██║██████╔╝
    ██║███╗██║██╔══██║██║     ██║     ██╔═══╝ ██║██║╚██╔╝██║██╔═══╝ 
    ╚███╔███╔╝██║  ██║███████╗███████╗██║     ██║██║ ╚═╝ ██║██║     
     ╚══╝╚══╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝     ╚═╝╚═╝     ╚═╝╚═╝     
EOF
    printf "\n${BOLD}${BLUE}%s${NC}\n" "                    Ultimate Wallpaper Collector v0.5.1"
    printf "${BOLD}${CYAN}%s${NC}\n\n" "                        Created by 0xB0RN3"
}

# Select repositories
select_repos() {
    echo "Available repositories:"
    local i=1
    for repo_name in "${!REPOS[@]}"; do
        echo "$i. $repo_name"
        ((i++))
    done
    while true; do
        read -p "Enter numbers separated by spaces or 'all' (e.g., 1 3 5): " selection
        if [[ "$selection" == "all" ]]; then
            selected_repos=("${!REPOS[@]}")
            break
        elif [[ "$selection" =~ ^[0-9\ ]+$ ]]; then
            selected_repos=()
            valid=true
            for num in $selection; do
                if [ "$num" -ge 1 ] && [ "$num" -le "${#REPOS[@]}" ]; then
                    selected_repos+=("${!REPOS[@]:$((num-1)):1}")
                else
                    echo "Invalid number: $num. Please select between 1 and ${#REPOS[@]}."
                    valid=false
                    break
                fi
            done
            if $valid && [ ${#selected_repos[@]} -gt 0 ]; then
                break
            fi
        else
            echo "Invalid input. Use numbers separated by spaces or 'all'."
        fi
    done
}

# Process wallpapers
process_wallpapers() {
    local save_dir="$1"
    shift
    local selected_repos=("$@")
    local temp_dir
    temp_dir=$(mktemp -d) || { echo "Failed to create temp directory"; exit 1; }
    declare -A processed_hashes
    local total_repos=${#selected_repos[@]}
    local current_repo=0
    local total_wallpapers=0
    local paused=0

    # Trap Ctrl+C to clean up and exit gracefully
    trap 'echo -e "\n${YELLOW}Download interrupted.${NC}"; echo "Total unique wallpapers downloaded: $total_wallpapers"; rm -rf "$temp_dir"; exit 0' INT

    for repo_name in "${selected_repos[@]}"; do
        ((current_repo++))
        IFS='|' read -r url branch <<< "${REPOS[$repo_name]}"
        echo "Processing $repo_name..."
        if ! git clone --depth 1 --quiet --branch "$branch" "$url" "$temp_dir/$repo_name" 2>/dev/null; then
            echo "${RED}Failed to clone $repo_name. Skipping...${NC}"
            continue
        fi

        # Process images
        find "$temp_dir/$repo_name" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" \) -print0 |
        while IFS= read -r -d '' img; do
            # Handle pause state
            while [ "$paused" -eq 1 ]; do
                echo "Paused. Press 'c' to continue, 's' to stop:"
                read -n 1 -s key
                case "$key" in
                    c) paused=0; echo "Resuming...";;
                    s) echo "Stopped by user."; echo "Total unique wallpapers downloaded: $total_wallpapers"; rm -rf "$temp_dir"; exit 0;;
                esac
            done

            # Check image dimensions
            width=$(identify -format "%w" "$img" 2>/dev/null || echo 0)
            height=$(identify -format "%h" "$img" 2>/dev/null || echo 0)
            if [ "$width" -ge 1920 ] && [ "$height" -ge 1080 ]; then
                hash=$(sha256sum "$img" | cut -d' ' -f1)
                if [[ -z "${processed_hashes[$hash]}" ]]; then
                    processed_hashes[$hash]=1
                    if convert "$img" -strip -quality 95 "$save_dir/${hash:0:16}.jpg" 2>/dev/null; then
                        ((total_wallpapers++))
                    fi
                fi
            fi

            # Check for pause input
            if read -t 0.1 -n 1 key 2>/dev/null; then
                if [[ "$key" == "p" ]]; then
                    paused=1
                    echo "Pausing..."
                fi
            fi
        done
        show_progress "$current_repo" "$total_repos"
        rm -rf "$temp_dir/$repo_name"
    done
    echo -e "\n${GREEN}Collection complete! Total unique wallpapers downloaded: $total_wallpapers${NC}"
    rm -rf "$temp_dir"
}

# Main function
main() {
    show_banner
    install_dependencies

    # Set save directory
    default_dir="$HOME/Pictures/Wallpapers"
    read -p "Enter directory to save wallpapers [default: $default_dir]: " SAVE_DIR
    SAVE_DIR=${SAVE_DIR:-$default_dir}
    if ! mkdir -p "$SAVE_DIR" 2>/dev/null; then
        echo "${RED}Cannot create directory $SAVE_DIR. Check permissions.${NC}"
        exit 1
    fi

    # Check available space
    REQUIRED_SPACE=3758096384  # 3.5GB in bytes
    echo "Estimated storage required: ~3.5GB"
    AVAILABLE_SPACE=$(df -B1 --output=avail "$SAVE_DIR" | tail -1 2>/dev/null || echo 0)
    if [ "$AVAILABLE_SPACE" -lt "$REQUIRED_SPACE" ]; then
        echo "${YELLOW}Warning: Only $((AVAILABLE_SPACE / 1048576))MB available, need ~3500MB${NC}"
        read -p "Proceed anyway? (y/n): " proceed
        if [[ "$proceed" != "y" && "$proceed" != "Y" ]]; then
            echo "Aborted by user."
            exit 0
        fi
    fi

    # Select and process repositories
    select_repos
    echo "Controls: 'p' to pause, Ctrl+C to stop."
    process_wallpapers "$SAVE_DIR" "${selected_repos[@]}"
}

# Execute with error handling
set -e
main 2>/dev/null || {
    echo -e "\n${RED}${BOLD}An error occurred. Check your internet connection, permissions, or dependencies.${NC}"
    exit 1
}
