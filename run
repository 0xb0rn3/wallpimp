#!/usr/bin/env python3
# WallPimp v0.4.1 Optimized
# Developer: 0xB0RN3 (github.com/0xb0rn3)

import sys
import os
import hashlib
import shutil
import tempfile
import asyncio
import platform
import subprocess
import importlib
from pathlib import Path
from typing import Set, Dict
from dataclasses import dataclass
from PIL import Image
from concurrent.futures import ThreadPoolExecutor

# Dependency check and installation
QtWidgets = importlib.util.find_spec("PySide6.QtWidgets")

def install_dependencies():
    required = {'PySide6': 'pyside6', 'PIL': 'pillow'}
    missing = [pkg for imp, pkg in required.items() if importlib.util.find_spec(imp) is None]
    
    if missing:
        from PySide6.QtWidgets import QApplication, QMessageBox
        app = QApplication(sys.argv)
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Critical)
        msg.setWindowTitle("Missing Dependencies")
        msg.setText("Required packages missing. Install now?")
        msg.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        
        if msg.exec() == QMessageBox.StandardButton.Yes:
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", "--user", *missing], 
                              check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                QMessageBox.information(None, "Success", "Installation complete!\nPlease restart the application.")
            except subprocess.CalledProcessError:
                QMessageBox.critical(None, "Error", "Installation failed silently")
        sys.exit()

if not QtWidgets:
    install_dependencies()

# GUI imports
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QLabel, QProgressBar, QPushButton, QFileDialog, QCheckBox, QGroupBox,
    QScrollArea, QMessageBox, QSizePolicy, QMenuBar, QMenu
)
from PySide6.QtCore import Qt, QThreadPool, QRunnable, Signal, QObject, QTimer
from PySide6.QtGui import QAction, QFont

@dataclass
class DownloadStats:
    successful_repos: int = 0
    failed_repos: int = 0
    total_processed: int = 0
    duplicates: int = 0

class WorkerSignals(QObject):
    repo_started = Signal(dict)
    repo_finished = Signal(dict, bool)
    progress_updated = Signal(int)
    error = Signal(str)
    finished = Signal()

class WallpaperWorker(QRunnable):
    def __init__(self, repos, save_dir):
        super().__init__()
        self.repos = repos
        self.save_dir = save_dir
        self.signals = WorkerSignals()
        self._is_running = True
        self.processed_hashes = set()
        self.batch_counter = 0
        self.BATCH_SIZE = 100
        self.supported_formats = {'.jpg', '.jpeg', '.png'}
        self.executor = ThreadPoolExecutor(max_workers=os.cpu_count() or 4)

    def run(self):
        asyncio.run(self._run())

    async def _run(self):
        try:
            total_files = sum([self.estimate_file_count(repo) for repo in self.repos])
            self.signals.progress_updated.emit(0)
            
            for repo in self.repos:
                if not self._is_running: break
                await self.process_repository(repo)
                
            self.signals.finished.emit()
        except Exception as e:
            self.signals.error.emit(str(e))
        finally:
            self.executor.shutdown(wait=False)

    def estimate_file_count(self, repo):
        # Conservative estimate for progress calculation
        return 150  # Average per repo

    async def process_repository(self, repo):
        self.signals.repo_started.emit(repo)
        temp_dir = Path(tempfile.mkdtemp())
        try:
            process = await asyncio.create_subprocess_exec(
                'git', 'clone', '--depth', '1',
                '--filter=blob:none',
                '--single-branch',
                '--branch', repo['branch'], 
                repo['url'], str(temp_dir),
                stdout=asyncio.subprocess.DEVNULL,
                stderr=asyncio.subprocess.DEVNULL
            )
            
            if await process.wait() != 0:
                return

            futures = []
            for root, _, files in os.walk(temp_dir):
                for file in files:
                    if Path(file).suffix.lower() in self.supported_formats:
                        futures.append(
                            self.executor.submit(self.process_image, Path(root)/file)
                        )

            for future in asyncio.as_completed(futures):
                await future
                self.batch_counter += 1
                if self.batch_counter % self.BATCH_SIZE == 0:
                    self.signals.progress_updated.emit(self.BATCH_SIZE)
                    
            self.signals.repo_finished.emit(repo, True)
        except Exception:
            self.signals.repo_finished.emit(repo, False)
        finally:
            shutil.rmtree(temp_dir, ignore_errors=True)

    def process_image(self, source):
        try:
            with Image.open(source) as img:
                if img.size[0] < 1920 or img.size[1] < 1080:
                    return

                with open(source, 'rb') as f:
                    file_hash = hashlib.sha256(f.read()).hexdigest()

                if file_hash in self.processed_hashes:
                    return

                output_path = self.save_dir / f"{file_hash}{source.suffix}"
                img.save(output_path, 
                        quality=100 if source.suffix.lower() == '.png' else 95,
                        optimize=True,
                        compress_level=3)
                self.processed_hashes.add(file_hash)
        except Exception:
            pass

class WallpaperGUI(QMainWindow):
    REPOSITORIES = [
        {'name': 'Minimalist', 'url': 'https://github.com/dharmx/walls', 'branch': 'main', 'icon': '🖼️', 'desc': 'Clean minimalist designs'},
        {'name': 'Anime', 'url': 'https://github.com/HENTAI-CODER/Anime-Wallpaper', 'branch': 'main', 'icon': '🌸', 'desc': 'Anime & manga artwork'},
        {'name': 'Nature', 'url': 'https://github.com/FrenzyExists/wallpapers', 'branch': 'main', 'icon': '🌿', 'desc': 'Nature landscapes'},
        {'name': 'Scenic', 'url': 'https://github.com/michaelScopic/Wallpapers', 'branch': 'main', 'icon': '🏞️', 'desc': 'Scenic vistas'},
        {'name': 'Artistic', 'url': 'https://github.com/D3Ext/aesthetic-wallpapers', 'branch': 'main', 'icon': '🎨', 'desc': 'Artistic styles'},
        {'name': 'Anime Pack', 'url': 'https://github.com/Dreamer-Paul/Anime-Wallpaper', 'branch': 'main', 'icon': '🎎', 'desc': 'Curated anime art'},
        {'name': 'Linux', 'url': 'https://github.com/polluxau/linuxnext-wallpapers', 'branch': 'main', 'icon': '🐧', 'desc': 'Linux desktop art'},
        {'name': 'Mixed', 'url': 'https://github.com/makccr/wallpapers', 'branch': 'main', 'icon': '🌟', 'desc': 'Diverse styles'},
        {'name': 'Desktop', 'url': 'https://github.com/port19x/Wallpapers', 'branch': 'main', 'icon': '💻', 'desc': 'Minimalist desktop'},
        {'name': 'Gaming', 'url': 'https://github.com/ryan4yin/wallpapers', 'branch': 'main', 'icon': '🎮', 'desc': 'Gaming-inspired art'},
        {'name': 'Photos', 'url': 'https://github.com/linuxdotexe/wallpapers', 'branch': 'main', 'icon': '📷', 'desc': 'Professional photography'},
        {'name': 'Digital', 'url': 'https://github.com/0xb0rn3/wallpapers', 'branch': 'main', 'icon': '🖥️', 'desc': 'Digital creations'}
    ]

    def __init__(self):
        super().__init__()
        self.worker = None
        self.thread_pool = QThreadPool.globalInstance()
        self.update_timer = QTimer()
        self.pending_updates = 0
        self.total_files = 0
        self.init_ui()
        self.setWindowTitle("WallPimp v0.4.1 Optimized")
        self.setMinimumSize(800, 600)
        self.setStyleSheet("""
            QMainWindow { 
                background-color: #f8f9fa;
                font-family: 'Segoe UI', Arial;
            }
            QGroupBox { 
                border: 1px solid #dee2e6;
                border-radius: 6px;
                margin-top: 1ex;
                font-size: 13px;
                color: #2d3436;
            }
            QProgressBar { 
                height: 20px;
                border-radius: 4px;
                border: 1px solid #ced4da;
                text-align: center;
            }
            QProgressBar::chunk { 
                background-color: #4dabf7;
                border-radius: 3px;
            }
            QCheckBox { 
                spacing: 8px; 
                font-size: 13px;
            }
            QPushButton {
                padding: 8px 16px;
                border-radius: 4px;
                background-color: #e9ecef;
                border: 1px solid #dee2e6;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #dee2e6;
            }
        """)

    def init_ui(self):
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        
        # Menu Bar
        menu_bar = QMenuBar()
        help_menu = QMenu("&Help", self)
        about_action = QAction("&About", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        menu_bar.addMenu(help_menu)
        self.setMenuBar(menu_bar)

        # Header
        header = QLabel("WallPimp - Intelligent Wallpaper Collector")
        header.setFont(QFont("Segoe UI", 16, QFont.Bold))
        header.setStyleSheet("color: #2c3e50; margin: 15px 0;")
        header.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(header)

        # Repository Grid
        repo_group = QGroupBox("Select Collections (Ctrl+A to select all)")
        repo_layout = QGridLayout()
        
        self.repo_checkboxes = []
        for i, repo in enumerate(self.REPOSITORIES):
            cb = QCheckBox(f"{repo['icon']} {repo['name']}")
            cb.setToolTip(repo['desc'])
            cb.setChecked(True)
            repo_layout.addWidget(cb, i//3, i%3)
            self.repo_checkboxes.append(cb)
        
        repo_group.setLayout(repo_layout)
        main_layout.addWidget(repo_group)

        # Progress Section
        progress_group = QGroupBox("Download Progress")
        progress_layout = QVBoxLayout()
        
        self.main_progress = QProgressBar()
        self.main_progress.setRange(0, 100)
        self.main_progress.setFormat("Overall Progress: %p%")
        progress_layout.addWidget(self.main_progress)
        
        progress_group.setLayout(progress_layout)
        main_layout.addWidget(progress_group)

        # Control Panel
        control_layout = QHBoxLayout()
        self.btn_dir = QPushButton("📁 Choose Folder")
        self.btn_dir.clicked.connect(self.choose_directory)
        
        self.dir_label = QLabel("No folder selected")
        self.dir_label.setStyleSheet("color: #6c757d; font-size: 12px;")
        
        self.btn_start = QPushButton("▶ Start Collection")
        self.btn_start.setStyleSheet("background-color: #4dabf7; color: white;")
        self.btn_start.clicked.connect(self.start_download)
        
        self.btn_stop = QPushButton("⏹ Stop")
        self.btn_stop.setStyleSheet("background-color: #ff6b6b; color: white;")
        self.btn_stop.clicked.connect(self.stop_download)
        self.btn_stop.setEnabled(False)

        control_layout.addWidget(self.btn_dir)
        control_layout.addWidget(self.dir_label)
        control_layout.addStretch()
        control_layout.addWidget(self.btn_start)
        control_layout.addWidget(self.btn_stop)
        main_layout.addLayout(control_layout)

        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)

        # Setup update timer
        self.update_timer.setInterval(200)
        self.update_timer.timeout.connect(self.update_display)

    def show_about(self):
        about_text = """<div style='text-align: center'>
            <h3 style='color: #2c3e50;'>WallPimp v0.4.1 Optimized</h3>
            <p>Developed by <b>0xB0RN3</b></p>
            <p>GitHub: <a href='https://github.com/0xb0rn3' style='color: #4dabf7;'>github.com/0xb0rn3</a></p>
            <hr>
            <p style='color: #6c757d;'>
                Features:<br>
                • 12 curated collections<br>
                • Original quality preservation<br>
                • Smart duplicate detection<br>
                • Background processing<br>
                • Cross-platform support
            </p>
        </div>"""
        
        msg = QMessageBox(self)
        msg.setWindowTitle("About WallPimp")
        msg.setTextFormat(Qt.TextFormat.RichText)
        msg.setText(about_text)
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()

    def choose_directory(self):
        path = QFileDialog.getExistingDirectory(self, "Select Save Directory")
        if path:
            self.save_dir = Path(path)
            self.dir_label.setText(path)
            self.dir_label.setStyleSheet("color: #2c3e50; font-size: 12px;")

    def start_download(self):
        if not hasattr(self, 'save_dir'):
            QMessageBox.warning(self, "Error", "Please select a save directory first!")
            return

        selected_repos = [repo for repo, cb in zip(self.REPOSITORIES, self.repo_checkboxes) if cb.isChecked()]
        if not selected_repos:
            QMessageBox.warning(self, "Error", "Please select at least one collection!")
            return

        self.total_files = len(selected_repos) * 150  # Estimated file count
        self.main_progress.setValue(0)
        
        self.worker = WallpaperWorker(selected_repos, self.save_dir)
        self.worker.signals.progress_updated.connect(self.queue_update)
        self.worker.signals.finished.connect(self.download_finished)
        self.worker.signals.error.connect(self.show_error)
        
        self.btn_start.setEnabled(False)
        self.btn_stop.setEnabled(True)
        self.thread_pool.start(self.worker)
        self.update_timer.start()

    def queue_update(self, count):
        self.pending_updates += count
        progress = min(int((self.pending_updates / self.total_files) * 100), 100)
        self.main_progress.setValue(progress)

    def update_display(self):
        if self.pending_updates > 0:
            self.main_progress.repaint()
            self.pending_updates = 0

    def stop_download(self):
        if self.worker: 
            self.worker.stop()
        self.btn_start.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.update_timer.stop()

    def download_finished(self):
        self.stop_download()
        QMessageBox.information(self, "Complete", 
            "Download finished successfully!\n"
            f"Wallpapers saved to: {self.save_dir}")

    def show_error(self, message):
        QMessageBox.critical(self, "Error", message)
        self.stop_download()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = WallpaperGUI()
    window.show()
    sys.exit(app.exec())
