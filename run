#!/usr/bin/env python3

import os
import sys
import hashlib
import shutil
import subprocess
import tempfile
import asyncio
import aiohttp
import platform
from pathlib import Path
from typing import List, Set, Dict
from dataclasses import dataclass
from rich.console import Console
from rich.progress import (
    Progress, 
    SpinnerColumn, 
    TextColumn, 
    BarColumn,
    TimeRemainingColumn,
    TransferSpeedColumn
)
from rich.panel import Panel
from rich.table import Table
from rich.markdown import Markdown
from PIL import Image
from concurrent.futures import ThreadPoolExecutor

@dataclass
class DownloadStats:
    """Track statistics for the download operation"""
    successful_repos: int = 0
    failed_repos: int = 0
    total_processed: int = 0
    duplicates: int = 0
    
class WallpaperDownloader:
    # Enhanced repository list with better descriptions
    REPOS = [
        {
            "url": "https://github.com/dharmx/walls",
            "branch": "main",
            "description": "🎨 Minimalist digital art",
            "emoji": "🖼️"
        },
        {
            "url": "https://github.com/HENTAI-CODER/Anime-Wallpaper",
            "branch": "main",
            "description": "🌸 Anime & manga art",
            "emoji": "🌸"
        },
        {
            "url": "https://github.com/FrenzyExists/wallpapers",
            "branch": "main",
            "description": "🌄 Nature landscapes",
            "emoji": "🌿"
        },
        {
            "url": "https://github.com/michaelScopic/Wallpapers",
            "branch": "main",
            "description": "🏞️ Scenic vistas",
            "emoji": "🗻"
        },
        {
            "url": "https://github.com/ryan4yin/wallpapers",
            "branch": "main",
            "description": "🎮 Gaming themes",
            "emoji": "🕹️"
        },
        {
            "url": "https://github.com/port19x/Wallpapers",
            "branch": "main",
            "description": "💻 Desktop minimalism",
            "emoji": "💡"
        },
        {
            "url": "https://github.com/D3Ext/aesthetic-wallpapers",
            "branch": "main",
            "description": "🖌️ Artistic styles",
            "emoji": "🎭"
        },
        {
            "url": "https://github.com/Dreamer-Paul/Anime-Wallpaper",
            "branch": "main",
            "description": "🍥 Anime collection",
            "emoji": "🎎"
        },
        {
            "url": "https://github.com/polluxau/linuxnext-wallpapers",
            "branch": "main",
            "description": "🐧 Linux themes",
            "emoji": "🐧"
        },
        {
            "url": "https://github.com/makccr/wallpapers",
            "branch": "main",
            "description": "🌈 Mixed collection",
            "emoji": "🌟"
        }
    ]

    def __init__(self):
        self.console = Console()
        self.stats = DownloadStats()
        self.temp_dir = Path(tempfile.mkdtemp())
        self.processed_hashes: Set[str] = set()
        self.supported_formats = {'.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.png', '.tiff'}
        
    async def check_dependencies(self) -> bool:
        """Check and install required system dependencies"""
        required = {
            'git': 'git',
            'pillow': 'python3-pillow',
            'rich': 'python3-rich',
            'aiohttp': 'python3-aiohttp'
        }
        
        missing = []
        for pkg in required:
            try: __import__(pkg)
            except ImportError: missing.append(required[pkg])
        
        if missing:
            self.console.print(
                Panel(f"[yellow]Installing missing dependencies: {', '.join(missing)}[/yellow]",
                title="⚙️ System Setup", style="blue")
            )
            
            if platform.system() == "Linux":
                managers = {
                    "apt": ["sudo", "apt", "install", "-y"],
                    "dnf": ["sudo", "dnf", "install", "-y"],
                    "pacman": ["sudo", "pacman", "-S", "--noconfirm"]
                }
                
                for cmd, base in managers.items():
                    if shutil.which(cmd):
                        try:
                            subprocess.run(base + missing, check=True)
                            return True
                        except subprocess.CalledProcessError:
                            self.console.print(
                                Panel("[red]Failed to install dependencies[/red]", 
                                style="red", title="❌ Error")
                            )
                            return False
                self.console.print(
                    Panel("[red]No supported package manager found[/red]", 
                    style="red", title="❌ Error")
                )
                return False
        return True

    async def download_repo(self, repo: Dict[str, str], save_dir: Path) -> bool:
        """Download and process a single repository"""
        repo_name = repo['url'].split('/')[-1]
        repo_path = self.temp_dir / repo_name
        
        try:
            process = await asyncio.create_subprocess_exec(
                'git', 'clone', '--depth', '1', 
                '--branch', repo['branch'], 
                repo['url'], str(repo_path),
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            await process.communicate()
            
            if process.returncode != 0:
                return False
                
            await self.process_directory(repo_path, save_dir)
            return True
            
        except Exception as e:
            self.console.print(
                Panel(f"[red]Error processing {repo_name}:[/red]\n{str(e)}",
                title="⚠️ Error", style="red")
            )
            return False
            
    async def process_directory(self, source_dir: Path, dest_dir: Path):
        """Process all images in a directory"""
        with ThreadPoolExecutor() as executor:
            tasks = []
            for file_path in source_dir.rglob('*'):
                if file_path.suffix.lower() in self.supported_formats:
                    tasks.append(
                        asyncio.get_event_loop().run_in_executor(
                            executor,
                            self.process_image,
                            file_path,
                            dest_dir
                        )
                    )
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            for result in results:
                if isinstance(result, Exception):
                    self.stats.failed_repos += 1
                elif result:
                    self.stats.total_processed += 1
                else:
                    self.stats.duplicates += 1

    def process_image(self, source: Path, dest_dir: Path) -> bool:
        """Process a single image file"""
        try:
            with open(source, 'rb') as f:
                file_hash = hashlib.sha256(f.read()).hexdigest()
            
            if file_hash in self.processed_hashes:
                return False
                
            with Image.open(source) as img:
                width, height = img.size
                
                if width < 1920 or height < 1080:
                    return False
                
                new_filename = f"{file_hash}_{source.name}"
                if source.suffix.lower() not in {'.png', '.jpg', '.jpeg'}:
                    new_filename = f"{file_hash}_{source.stem}.png"
                
                output_path = dest_dir / new_filename
                img.save(output_path, quality=95)
                self.processed_hashes.add(file_hash)
                return True
                
        except Exception as e:
            self.console.print(
                Panel(f"[red]Error processing {source}:[/red]\n{str(e)}",
                title="⚠️ Error", style="red")
            )
            return False

    async def run(self):
        """Main execution flow"""
        # Show welcome message
        self.console.print(Panel(
            Markdown("# WallPimp 0.4\n**Intelligent Wallpaper Collector**"),
            style="bold magenta",
            subtitle="by [link=https://github.com/0xb0rn3]0xB0RN3[/link]",
            subtitle_align="right"
        ))
        
        if not await self.check_dependencies():
            return
        
        default_dir = Path.home() / "Pictures" / "Wallpapers"
        save_dir = Path(self.console.input(
            f"\n[bold cyan]📁 Save directory [dim](default: {default_dir}):[/dim] [/bold cyan]"
        ).strip() or str(default_dir))
        save_dir.mkdir(parents=True, exist_ok=True)
        
        # Enhanced progress display
        with Progress(
            SpinnerColumn(),
            TextColumn("[bold blue]{task.description}"),
            BarColumn(),
            TimeRemainingColumn(),
            TransferSpeedColumn(),
            console=self.console
        ) as progress:
            tasks = {}
            for repo in self.REPOS:
                emoji = repo['emoji']
                desc = f"{emoji} [cyan]{repo['description']}[/cyan]"
                task_id = progress.add_task(desc, total=None)
                tasks[task_id] = repo
            
            for task_id, repo in tasks.items():
                if await self.download_repo(repo, save_dir):
                    self.stats.successful_repos += 1
                    progress.update(task_id, 
                        description=f"[green]✓ {repo['description']}[/green]",
                        completed=1
                    )
                else:
                    self.stats.failed_repos += 1
                    progress.update(task_id,
                        description=f"[red]✗ {repo['description']}[/red]",
                        completed=1
                    )
        
        # Enhanced summary table
        summary_table = Table(
            title="📊 Download Summary",
            show_header=False,
            box=None,
            expand=True
        )
        
        summary_table.add_row("✅ Successful Repositories", f"[bold green]{self.stats.successful_repos}[/bold green]")
        summary_table.add_row("❌ Failed Repositories", f"[bold red]{self.stats.failed_repos}[/bold red]")
        summary_table.add_row("🖼️ Total Processed", f"[bold]{self.stats.total_processed}[/bold]")
        summary_table.add_row("🌀 Duplicates Skipped", f"[dim]{self.stats.duplicates}[/dim]")
        summary_table.add_row("📂 Save Location", f"[cyan]{save_dir}[/cyan]")
        
        self.console.print(Panel(
            summary_table,
            title="✨ Operation Complete",
            border_style="green",
            padding=(1, 4)
        ))
        
        shutil.rmtree(self.temp_dir)

if __name__ == "__main__":
    downloader = WallpaperDownloader()
    asyncio.run(downloader.run())
