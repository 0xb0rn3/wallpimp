#!/usr/bin/env python3

import os
import sys
import subprocess
import tempfile
import shutil
import requests
import configparser
import hashlib
from PIL import Image
import glob
import threading
import time
import select
from tqdm import tqdm
from colorama import init, Fore, Style
import multiprocessing as mp
from itertools import cycle

# Initialize colorama for cross-platform colored output
init()

# Define some crazy colors and styles
BANNER_COLOR = Fore.MAGENTA + Style.BRIGHT
INFO_COLOR = Fore.CYAN + Style.BRIGHT
ERROR_COLOR = Fore.RED + Style.BRIGHT
SUCCESS_COLOR = Fore.GREEN + Style.BRIGHT
WARNING_COLOR = Fore.YELLOW + Style.BRIGHT
RESET = Style.RESET_ALL

# ASCII Art with a twist
BANNER = """
██╗    ██╗ █████╗ ██╗     ██╗     ██████╗ ██╗███╗   ███╗██████╗ 
██║    ██║██╔══██╗██║     ██║     ██╔══██╗██║████╗ ████║██╔══██╗
██║ █╗ ██║███████║██║     ██║     ██████╔╝██║██╔████╔██║██████╔╝
██║███╗██║██╔══██║██║     ██║     ██╔═══╝ ██║██║╚██╔╝██║██╔═══╝ 
╚███╔███╔╝██║  ██║███████╗███████╗██║     ██║██║ ╚═╝ ██║██║     
 ╚══╝╚══╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝     ╚═╝╚═╝     ╚═╝╚═╝     
"""

# Spinner for extra pizzazz
SPINNER = cycle(['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'])

def show_banner():
    """Display an animated banner because why not?"""
    print("\033[2J\033[H")  # Clear screen
    for _ in range(5):  # Flash it up
        for line in BANNER.split('\n'):
            print(f"{BANNER_COLOR}{line.center(80)}{RESET}")
        print(f"{INFO_COLOR}        Ultimate Wallpaper Collector v0.5.2 - By 0xB0RN3{RESET}".center(80))
        time.sleep(0.1)
        print("\033[2J\033[H")  # Clear screen again
    for line in BANNER.split('\n'):
        print(f"{BANNER_COLOR}{line.center(80)}{RESET}")
    print(f"{INFO_COLOR}        Ultimate Wallpaper Collector v0.5.2 - By 0xB0RN3{RESET}".center(80))
    print(f"{SUCCESS_COLOR}      Let’s collect some wallpapers like it’s 1999!{RESET}\n".center(80))

def check_dependencies():
    """Ensure Git and ImageMagick are ready to rock."""
    print(f"{INFO_COLOR}Checking dependencies...{RESET}", end=" ")
    for _ in range(5):
        sys.stdout.write(next(SPINNER))
        sys.stdout.flush()
        time.sleep(0.1)
        sys.stdout.write('\b')
    if not shutil.which("git"):
        print(f"\n{ERROR_COLOR}Git is missing! Install it with 'sudo apt install git' or equivalent.{RESET}")
        sys.exit(1)
    if not shutil.which("convert"):
        print(f"\n{ERROR_COLOR}ImageMagick is AWOL! Install it with 'sudo apt install imagemagick'.{RESET}")
        sys.exit(1)
    print(f"{SUCCESS_COLOR}All systems go!{RESET}")

def load_config():
    """Fetch and parse the config with some fallback magic."""
    config_url = "https://raw.githubusercontent.com/0xb0rn3/wallpimp/main/config.ini"
    print(f"{INFO_COLOR}Grabbing config from the interwebs...{RESET}", end=" ")
    for _ in range(5):
        sys.stdout.write(next(SPINNER))
        sys.stdout.flush()
        time.sleep(0.1)
        sys.stdout.write('\b')
    try:
        response = requests.get(config_url, timeout=10)
        response.raise_for_status()
        config = configparser.ConfigParser()
        config.read_string(response.text)
        repos = []
        for key in config['Repositories']:
            value = config['Repositories'][key]
            parts = [p.strip() for p in value.split('|')]
            if len(parts) >= 3:
                repos.append({
                    'name': key,
                    'icon': parts[0],
                    'url': parts[1],
                    'branch': parts[2],
                    'description': parts[3] if len(parts) > 3 else 'No description'
                })
        print(f"{SUCCESS_COLOR}Config loaded! Found {len(repos)} repos.{RESET}")
        return repos
    except Exception as e:
        print(f"\n{WARNING_COLOR}Config fetch failed: {e}. Going rogue with defaults!{RESET}")
        return [
            {'name': 'Minimalist', 'url': 'https://github.com/dharmx/walls', 'branch': 'main', 'description': 'Clean minimalist designs'},
            {'name': 'Anime', 'url': 'https://github.com/HENTAI-CODER/Anime-Wallpaper', 'branch': 'main', 'description': 'Anime & manga artwork'},
            {'name': 'Nature', 'url': 'https://github.com/FrenzyExists/wallpapers', 'branch': 'main', 'description': 'Nature landscapes'},
            # Add more defaults as needed
        ]

def select_repos(repos):
    """Fancy repo selector with numbers and flair."""
    print(f"\n{INFO_COLOR}=== Pick Your Wallpaper Poison ==={RESET}")
    for i, repo in enumerate(repos, 1):
        print(f"{Fore.BLUE}{i}. {repo['name']}{RESET} - {repo['description']} {repo['icon']}")
    print(f"{INFO_COLOR}Type numbers (e.g., '1 3 5') or 'all' for everything.{RESET}")
    while True:
        selection = input(f"{BANNER_COLOR}Your choice: {RESET}").strip().lower()
        if selection == 'all':
            return repos
        try:
            indices = [int(x) - 1 for x in selection.split()]
            selected = [repos[i] for i in indices if 0 <= i < len(repos)]
            if selected:
                print(f"{SUCCESS_COLOR}Locked and loaded: {len(selected)} repos selected!{RESET}")
                return selected
            print(f"{ERROR_COLOR}Oops, nothing valid selected. Try again!{RESET}")
        except ValueError:
            print(f"{ERROR_COLOR}Numbers only, genius! Or 'all'.{RESET}")

def process_image(img_path, save_dir, processed_hashes, min_width=1920, min_height=1080):
    """Process a single image with hash deduplication."""
    try:
        with Image.open(img_path) as im:
            width, height = im.size
            if width >= min_width and height >= min_height:
                with open(img_path, 'rb') as f:
                    hash = hashlib.sha256(f.read()).hexdigest()
                if hash not in processed_hashes:
                    processed_hashes.add(hash)
                    im.convert('RGB').save(os.path.join(save_dir, f"{hash[:16]}.jpg"), quality=95)
                    return 1
        return 0
    except Exception as e:
        print(f"{ERROR_COLOR}Image {os.path.basename(img_path)} broke me: {e}{RESET}")
        return 0

def process_repo(repo, save_dir, processed_hashes, crazy_mode=False):
    """Process a single repo with flair and progress."""
    total_wallpapers = 0
    print(f"{INFO_COLOR}Cloning {repo['name']}...{RESET}", end=" ")
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            subprocess.run(['git', 'clone', '--depth=1', '--quiet', '--branch', repo['branch'], repo['url'], temp_dir], check=True)
            print(f"{SUCCESS_COLOR}Done!{RESET}")
        except subprocess.CalledProcessError:
            print(f"\n{ERROR_COLOR}Clone failed for {repo['name']}. Moving on...{RESET}")
            return 0

        images = glob.glob(os.path.join(temp_dir, '**', '*.jpg'), recursive=True) + \
                 glob.glob(os.path.join(temp_dir, '**', '*.jpeg'), recursive=True) + \
                 glob.glob(os.path.join(temp_dir, '**', '*.png'), recursive=True) + \
                 glob.glob(os.path.join(temp_dir, '**', '*.webp'), recursive=True)

        if crazy_mode:
            with mp.Pool(processes=mp.cpu_count()) as pool:
                results = pool.starmap(process_image, [(img, save_dir, processed_hashes) for img in images])
                total_wallpapers = sum(results)
        else:
            for img in tqdm(images, desc=f"{repo['name']} Walls", bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}"):
                if select.select([sys.stdin], [], [], 0)[0]:
                    key = sys.stdin.read(1)
                    if key == 'p':
                        print(f"{WARNING_COLOR}Paused! 'c' to continue, 's' to stop.{RESET}")
                        while True:
                            key = sys.stdin.read(1)
                            if key == 'c':
                                print(f"{SUCCESS_COLOR}Back in action!{RESET}")
                                break
                            elif key == 's':
                                print(f"{ERROR_COLOR}Stopping the madness!{RESET}")
                                return total_wallpapers
                total_wallpapers += process_image(img, save_dir, processed_hashes)
    return total_wallpapers

def process_wallpapers(save_dir, selected_repos, crazy_mode=False):
    """Orchestrate the wallpaper madness."""
    processed_hashes = set()
    total_wallpapers = 0
    print(f"\n{INFO_COLOR}Controls: 'p' to pause, 's' to stop (non-crazy mode), Ctrl+C to bail.{RESET}")
    
    if crazy_mode:
        print(f"{BANNER_COLOR}=== CRAZY MODE ACTIVATED: Parallel Processing ON ==={RESET}")
        with mp.Manager() as manager:
            shared_hashes = manager.Set()
            with mp.Pool(processes=min(mp.cpu_count(), len(selected_repos))) as pool:
                results = pool.starmap(process_repo, [(repo, save_dir, shared_hashes, True) for repo in selected_repos])
            total_wallpapers = sum(results)
            processed_hashes = set(shared_hashes)
    else:
        for i, repo in enumerate(selected_repos, 1):
            print(f"{BANNER_COLOR}Repo {i}/{len(selected_repos)}: {repo['name']}{RESET}")
            total_wallpapers += process_repo(repo, save_dir, processed_hashes)

    print(f"\n{SUCCESS_COLOR}WallPimp has pimped your collection! Unique wallpapers: {total_wallpapers}{RESET}")

def main():
    show_banner()
    check_dependencies()
    repos = load_config()
    
    default_dir = os.path.join(os.path.expanduser('~'), 'Pictures', 'Wallpapers')
    save_dir = input(f"{INFO_COLOR}Where to stash the goods? [{default_dir}]: {RESET}") or default_dir
    os.makedirs(save_dir, exist_ok=True)
    
    disk = shutil.disk_usage(save_dir)
    if disk.free < 3.5 * 1024 * 1024 * 1024:
        print(f"{WARNING_COLOR}Low space alert! Only {disk.free / (1024*1024*1024):.2f}GB free, need ~3.5GB.{RESET}")
        if input(f"{INFO_COLOR}Risk it? (y/n): {RESET}").lower() != 'y':
            print(f"{ERROR_COLOR}Bailing out!{RESET}")
            sys.exit(0)

    crazy_mode = input(f"{BANNER_COLOR}Go CRAZY with parallel downloads? (y/n): {RESET}").lower() == 'y'
    selected_repos = select_repos(repos)
    process_wallpapers(save_dir, selected_repos, crazy_mode)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{ERROR_COLOR}Ctrl+C detected! WallPimp is outta here!{RESET}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{ERROR_COLOR}WallPimp crashed spectacularly: {e}{RESET}")
        sys.exit(1)
