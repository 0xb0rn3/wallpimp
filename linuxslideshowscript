#!/usr/bin/env bash
# Enhanced Wallpaper Slideshow Script with Multi-Desktop Support and Autostart
# Compatible with XFCE, OpenBox, GNOME, KDE, MATE, Cinnamon, i3, and more
# Features: Desktop environment detection, autostart management, improved error handling

# Configuration section - customize these variables
read -p "WHAT DIRECTORY ARE YOUR WALLPAPERS IN > " WALLPAPER_DIR 
INTERVAL=300  # Time between wallpaper changes in seconds (300 = 5 minutes)
RANDOM_ORDER=true  # Set to false for alphabetical order
LOG_FILE="$HOME/.wallpaper_slideshow.log"
PID_FILE="$HOME/.wallpaper_slideshow.pid"
SCRIPT_NAME="$(basename "$0")"
SCRIPT_PATH="$(readlink -f "$0")"

# Desktop file for autostart functionality
DESKTOP_FILE="$HOME/.config/autostart/wallpaper-slideshow.desktop"

# Function to log messages with timestamps
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Enhanced function to detect desktop environment with broader support
detect_desktop_environment() {
    # First check XDG_CURRENT_DESKTOP (most reliable)
    case "${XDG_CURRENT_DESKTOP,,}" in
        *xfce*) echo "xfce" && return ;;
        *gnome*) echo "gnome" && return ;;
        *kde*|*plasma*) echo "kde" && return ;;
        *mate*) echo "mate" && return ;;
        *cinnamon*) echo "cinnamon" && return ;;
        *lxde*|*lxqt*) echo "lxde" && return ;;
        *unity*) echo "unity" && return ;;
        *budgie*) echo "budgie" && return ;;
        *pantheon*) echo "pantheon" && return ;;
    esac
    
    # Check DESKTOP_SESSION as fallback
    case "${DESKTOP_SESSION,,}" in
        *xfce*) echo "xfce" && return ;;
        *gnome*) echo "gnome" && return ;;
        *kde*|*plasma*) echo "kde" && return ;;
        *mate*) echo "mate" && return ;;
        *cinnamon*) echo "cinnamon" && return ;;
        *openbox*) echo "openbox" && return ;;
        *i3*) echo "i3" && return ;;
    esac
    
    # Process-based detection for window managers
    if pgrep -x "i3" > /dev/null; then
        echo "i3" && return
    elif pgrep -x "openbox" > /dev/null; then
        echo "openbox" && return
    elif pgrep -x "awesome" > /dev/null; then
        echo "awesome" && return
    elif pgrep -x "bspwm" > /dev/null; then
        echo "bspwm" && return
    elif pgrep -x "dwm" > /dev/null; then
        echo "dwm" && return
    fi
    
    # Command availability fallback detection
    if command -v xfconf-query > /dev/null && xfconf-query -c xfce4-desktop -l > /dev/null 2>&1; then
        echo "xfce"
    elif command -v gsettings > /dev/null && gsettings list-schemas | grep -q "org.gnome.desktop.background"; then
        echo "gnome"
    elif command -v kwriteconfig5 > /dev/null || command -v kwriteconfig > /dev/null; then
        echo "kde"
    elif command -v dconf > /dev/null && dconf list /org/mate/desktop/background/ > /dev/null 2>&1; then
        echo "mate"
    elif command -v dconf > /dev/null && dconf list /org/cinnamon/desktop/background/ > /dev/null 2>&1; then
        echo "cinnamon"
    elif command -v feh > /dev/null; then
        echo "generic_feh"  # Generic feh-based setup
    elif command -v nitrogen > /dev/null; then
        echo "generic_nitrogen"  # Generic nitrogen-based setup
    else
        echo "unknown"
    fi
}

# Function to set wallpaper in XFCE
set_wallpaper_xfce() {
    local wallpaper_path="$1"
    
    # Get all available backdrop properties for all monitors and workspaces
    local backdrop_props=$(xfconf-query -c xfce4-desktop -l 2>/dev/null | grep -E "backdrop.*image-path$|backdrop.*last-image$")
    
    if [ -z "$backdrop_props" ]; then
        # Fallback configurations for common XFCE setups
        local fallback_props=(
            "/backdrop/screen0/monitor0/workspace0/last-image"
            "/backdrop/screen0/monitor0/image-path"
            "/backdrop/screen0/monitorVGA-1/workspace0/last-image"
            "/backdrop/screen0/monitorVGA1/workspace0/last-image"
            "/backdrop/screen0/monitorHDMI-1/workspace0/last-image"
            "/backdrop/screen0/monitorHDMI1/workspace0/last-image"
        )
        
        for prop in "${fallback_props[@]}"; do
            xfconf-query -c xfce4-desktop -p "$prop" -s "$wallpaper_path" 2>/dev/null
        done
    else
        # Set wallpaper for all detected backdrop properties
        while IFS= read -r prop; do
            [ -n "$prop" ] && xfconf-query -c xfce4-desktop -p "$prop" -s "$wallpaper_path" 2>/dev/null
        done <<< "$backdrop_props"
    fi
    
    log_message "XFCE: Set wallpaper to $wallpaper_path"
}

# Function to set wallpaper in GNOME
set_wallpaper_gnome() {
    local wallpaper_path="$1"
    
    # Set wallpaper using gsettings
    gsettings set org.gnome.desktop.background picture-uri "file://$wallpaper_path" 2>/dev/null
    gsettings set org.gnome.desktop.background picture-uri-dark "file://$wallpaper_path" 2>/dev/null
    gsettings set org.gnome.desktop.background picture-options 'scaled' 2>/dev/null
    
    log_message "GNOME: Set wallpaper to $wallpaper_path"
}

# Function to set wallpaper in KDE
set_wallpaper_kde() {
    local wallpaper_path="$1"
    
    # KDE Plasma 5/6 wallpaper setting via D-Bus
    if command -v qdbus > /dev/null; then
        qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript "
            var allDesktops = desktops();
            for (i=0;i<allDesktops.length;i++) {
                d = allDesktops[i];
                d.wallpaperPlugin = 'org.kde.image';
                d.currentConfigGroup = Array('Wallpaper', 'org.kde.image', 'General');
                d.writeConfig('Image', 'file://$wallpaper_path');
            }" 2>/dev/null
    fi
    
    # Fallback using kwriteconfig
    if command -v kwriteconfig5 > /dev/null; then
        kwriteconfig5 --file ~/.config/plasma-org.kde.plasma.desktop-appletsrc --group "Containments" --group "1" --group "Wallpaper" --group "org.kde.image" --group "General" --key "Image" "file://$wallpaper_path" 2>/dev/null
    elif command -v kwriteconfig > /dev/null; then
        kwriteconfig --file ~/.config/plasma-org.kde.plasma.desktop-appletsrc --group "Containments" --group "1" --group "Wallpaper" --group "org.kde.image" --group "General" --key "Image" "file://$wallpaper_path" 2>/dev/null
    fi
    
    log_message "KDE: Set wallpaper to $wallpaper_path"
}

# Function to set wallpaper in MATE
set_wallpaper_mate() {
    local wallpaper_path="$1"
    
    # Use dconf to set MATE wallpaper
    dconf write /org/mate/desktop/background/picture-filename "'$wallpaper_path'" 2>/dev/null
    dconf write /org/mate/desktop/background/picture-options "'scaled'" 2>/dev/null
    
    log_message "MATE: Set wallpaper to $wallpaper_path"
}

# Function to set wallpaper in Cinnamon
set_wallpaper_cinnamon() {
    local wallpaper_path="$1"
    
    # Use dconf to set Cinnamon wallpaper
    dconf write /org/cinnamon/desktop/background/picture-uri "'file://$wallpaper_path'" 2>/dev/null
    dconf write /org/cinnamon/desktop/background/picture-options "'scaled'" 2>/dev/null
    
    log_message "Cinnamon: Set wallpaper to $wallpaper_path"
}

# Function to set wallpaper using feh (for lightweight WMs)
set_wallpaper_feh() {
    local wallpaper_path="$1"
    
    # Use feh to set wallpaper with various scaling options
    if feh --bg-scale "$wallpaper_path" 2>/dev/null; then
        # Save the feh command to ~/.fehbg for persistence
        echo "#!/bin/sh" > "$HOME/.fehbg"
        echo "feh --no-fehbg --bg-scale '$wallpaper_path'" >> "$HOME/.fehbg"
        chmod +x "$HOME/.fehbg"
        log_message "feh: Set wallpaper to $wallpaper_path"
    else
        log_message "ERROR: Failed to set wallpaper with feh"
        return 1
    fi
}

# Function to set wallpaper using nitrogen
set_wallpaper_nitrogen() {
    local wallpaper_path="$1"
    
    # Use nitrogen to set wallpaper
    if nitrogen --set-scaled "$wallpaper_path" 2>/dev/null; then
        log_message "nitrogen: Set wallpaper to $wallpaper_path"
    else
        log_message "ERROR: Failed to set wallpaper with nitrogen"
        return 1
    fi
}

# Enhanced function to set wallpaper based on desktop environment
set_wallpaper() {
    local wallpaper_path="$1"
    local desktop_env="$2"
    
    case "$desktop_env" in
        "xfce")
            set_wallpaper_xfce "$wallpaper_path"
            ;;
        "gnome"|"unity"|"pantheon")
            set_wallpaper_gnome "$wallpaper_path"
            ;;
        "kde")
            set_wallpaper_kde "$wallpaper_path"
            ;;
        "mate")
            set_wallpaper_mate "$wallpaper_path"
            ;;
        "cinnamon")
            set_wallpaper_cinnamon "$wallpaper_path"
            ;;
        "openbox"|"i3"|"awesome"|"bspwm"|"dwm"|"lxde"|"budgie"|"generic_feh")
            set_wallpaper_feh "$wallpaper_path"
            ;;
        "generic_nitrogen")
            set_wallpaper_nitrogen "$wallpaper_path"
            ;;
        *)
            # Try multiple methods as fallback
            if command -v feh > /dev/null; then
                set_wallpaper_feh "$wallpaper_path"
            elif command -v nitrogen > /dev/null; then
                set_wallpaper_nitrogen "$wallpaper_path"
            elif command -v gsettings > /dev/null; then
                set_wallpaper_gnome "$wallpaper_path"
            else
                log_message "ERROR: No supported wallpaper setter found for environment: $desktop_env"
                return 1
            fi
            ;;
    esac
}

# Function to get list of wallpaper files with enhanced format support
get_wallpaper_list() {
    # Find all common image formats with case-insensitive matching
    find "$WALLPAPER_DIR" -type f \( \
        -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o \
        -iname "*.bmp" -o -iname "*.gif" -o -iname "*.tiff" -o \
        -iname "*.tif" -o -iname "*.webp" -o -iname "*.svg" -o \
        -iname "*.ico" -o -iname "*.ppm" -o -iname "*.pgm" -o \
        -iname "*.pbm" -o -iname "*.xpm" \
    \) 2>/dev/null | head -1000  # Limit to prevent memory issues with huge directories
}

# Function to shuffle wallpaper list if random order is enabled
process_wallpaper_list() {
    local wallpaper_list="$1"
    
    if [ "$RANDOM_ORDER" = true ]; then
        echo "$wallpaper_list" | shuf
    else
        echo "$wallpaper_list" | sort
    fi
}

# Function to create autostart desktop file
create_autostart() {
    echo "Setting up autostart for wallpaper slideshow..."
    
    # Create autostart directory if it doesn't exist
    mkdir -p "$(dirname "$DESKTOP_FILE")"
    
    # Create the desktop file
    cat > "$DESKTOP_FILE" << EOF
[Desktop Entry]
Type=Application
Name=Wallpaper Slideshow
Comment=Automatic wallpaper slideshow for desktop environments
Exec=$SCRIPT_PATH start
Icon=preferences-desktop-wallpaper
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
StartupNotify=false
Terminal=false
Categories=System;
EOF
    
    chmod +x "$DESKTOP_FILE"
    
    # Also add to common shell startup files as fallback
    local startup_files=("$HOME/.xinitrc" "$HOME/.xprofile" "$HOME/.profile")
    local startup_command="# Wallpaper slideshow autostart\n$SCRIPT_PATH start &"
    
    for startup_file in "${startup_files[@]}"; do
        if [ -f "$startup_file" ] && ! grep -q "wallpaper.*slideshow" "$startup_file"; then
            echo -e "\n$startup_command" >> "$startup_file"
            echo "Added autostart entry to $startup_file"
        fi
    done
    
    echo "Autostart configured successfully!"
    echo "Desktop file created: $DESKTOP_FILE"
    log_message "Autostart configured for wallpaper slideshow"
}

# Function to remove autostart
remove_autostart() {
    echo "Removing autostart for wallpaper slideshow..."
    
    # Remove desktop file
    if [ -f "$DESKTOP_FILE" ]; then
        rm "$DESKTOP_FILE"
        echo "Removed desktop file: $DESKTOP_FILE"
    fi
    
    # Remove from shell startup files
    local startup_files=("$HOME/.xinitrc" "$HOME/.xprofile" "$HOME/.profile")
    
    for startup_file in "${startup_files[@]}"; do
        if [ -f "$startup_file" ] && grep -q "wallpaper.*slideshow\|$SCRIPT_PATH" "$startup_file"; then
            sed -i '/wallpaper.*slideshow\|'"$(echo "$SCRIPT_PATH" | sed 's/[[\.*^$()+?{|]/\\&/g')"'/d' "$startup_file"
            echo "Removed autostart entry from $startup_file"
        fi
    done
    
    echo "Autostart removed successfully!"
    log_message "Autostart removed for wallpaper slideshow"
}

# Function to check if autostart is enabled
check_autostart() {
    local autostart_enabled=false
    
    if [ -f "$DESKTOP_FILE" ]; then
        echo "Autostart desktop file exists: $DESKTOP_FILE"
        autostart_enabled=true
    fi
    
    # Check shell startup files
    local startup_files=("$HOME/.xinitrc" "$HOME/.xprofile" "$HOME/.profile")
    for startup_file in "${startup_files[@]}"; do
        if [ -f "$startup_file" ] && grep -q "wallpaper.*slideshow\|$SCRIPT_PATH" "$startup_file"; then
            echo "Autostart entry found in: $startup_file"
            autostart_enabled=true
        fi
    done
    
    if [ "$autostart_enabled" = false ]; then
        echo "Autostart is not configured"
    fi
    
    return $autostart_enabled
}

# Enhanced slideshow start function with better error handling
start_slideshow() {
    # Validate wallpaper directory
    if [ ! -d "$WALLPAPER_DIR" ]; then
        echo "Error: Wallpaper directory '$WALLPAPER_DIR' does not exist."
        echo "Please update the WALLPAPER_DIR variable or create the directory."
        exit 1
    fi
    
    # Detect desktop environment
    local desktop_env=$(detect_desktop_environment)
    echo "Detected desktop environment: $desktop_env"
    
    if [ "$desktop_env" = "unknown" ]; then
        echo "Warning: Could not detect desktop environment automatically."
        echo "Attempting to use fallback wallpaper setters..."
    fi
    
    # Get wallpaper list
    local wallpapers=$(get_wallpaper_list)
    if [ -z "$wallpapers" ]; then
        echo "Error: No wallpaper files found in '$WALLPAPER_DIR'."
        echo "Supported formats: JPG, JPEG, PNG, BMP, GIF, TIFF, WebP, SVG, XPM"
        exit 1
    fi
    
    local wallpaper_count=$(echo "$wallpapers" | wc -l)
    echo "Found $wallpaper_count wallpaper(s) in $WALLPAPER_DIR"
    echo "Slideshow interval: $INTERVAL seconds"
    echo "Random order: $RANDOM_ORDER"
    
    # Save PID for stop functionality
    echo $$ > "$PID_FILE"
    
    log_message "Starting wallpaper slideshow (PID: $$, Desktop: $desktop_env, Interval: ${INTERVAL}s, Random: $RANDOM_ORDER)"
    
    # Test wallpaper setting capability
    local first_wallpaper=$(echo "$wallpapers" | head -n1)
    if ! set_wallpaper "$first_wallpaper" "$desktop_env"; then
        echo "Error: Unable to set wallpaper. Please check your desktop environment setup."
        rm -f "$PID_FILE"
        exit 1
    fi
    
    echo "Wallpaper slideshow started successfully!"
    echo "Use '$SCRIPT_NAME stop' to stop the slideshow"
    echo "Use '$SCRIPT_NAME status' to check status"
    
    # Main slideshow loop with improved error handling
    local consecutive_errors=0
    local max_consecutive_errors=5
    
    while true; do
        local processed_wallpapers=$(process_wallpaper_list "$wallpapers")
        
        while IFS= read -r wallpaper; do
            if [ -f "$wallpaper" ]; then
                if set_wallpaper "$wallpaper" "$desktop_env"; then
                    echo "Current wallpaper: $(basename "$wallpaper")"
                    consecutive_errors=0  # Reset error counter on success
                else
                    ((consecutive_errors++))
                    log_message "ERROR: Failed to set wallpaper: $wallpaper (consecutive errors: $consecutive_errors)"
                    
                    if [ $consecutive_errors -ge $max_consecutive_errors ]; then
                        log_message "ERROR: Too many consecutive errors ($consecutive_errors). Stopping slideshow."
                        echo "Error: Too many consecutive wallpaper setting failures. Check logs: $LOG_FILE"
                        rm -f "$PID_FILE"
                        exit 1
                    fi
                fi
                
                # Sleep for the specified interval
                sleep "$INTERVAL"
            else
                log_message "WARNING: Wallpaper file no longer exists: $wallpaper"
            fi
        done <<< "$processed_wallpapers"
        
        # Refresh wallpaper list in case files were added/removed
        wallpapers=$(get_wallpaper_list)
        if [ -z "$wallpapers" ]; then
            log_message "ERROR: No wallpapers found during refresh. Stopping slideshow."
            echo "Error: No wallpapers found in directory. Stopping slideshow."
            rm -f "$PID_FILE"
            exit 1
        fi
    done
}

# Enhanced stop function
stop_slideshow() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            if kill "$pid" 2>/dev/null; then
                echo "Stopped wallpaper slideshow (PID: $pid)"
                log_message "Slideshow stopped (PID: $pid)"
            else
                echo "Failed to stop slideshow process (PID: $pid)"
                return 1
            fi
        else
            echo "Slideshow process not running (stale PID file)"
        fi
        rm -f "$PID_FILE"
    else
        echo "No slideshow process found"
        return 1
    fi
}

# Enhanced status function
status_slideshow() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            echo "Wallpaper slideshow is running (PID: $pid)"
            echo "Desktop environment: $(detect_desktop_environment)"
            echo "Log file: $LOG_FILE"
            echo "Configuration:"
            echo "  Wallpaper directory: $WALLPAPER_DIR"
            echo "  Interval: $INTERVAL seconds"
            echo "  Random order: $RANDOM_ORDER"
            echo "  Script path: $SCRIPT_PATH"
            
            # Show autostart status
            echo ""
            echo "Autostart status:"
            check_autostart
            
            # Show recent log entries
            if [ -f "$LOG_FILE" ]; then
                echo ""
                echo "Recent log entries:"
                tail -n 5 "$LOG_FILE"
            fi
        else
            echo "Slideshow process not running (stale PID file)"
            rm -f "$PID_FILE"
            return 1
        fi
    else
        echo "Wallpaper slideshow is not running"
        echo ""
        echo "Autostart status:"
        check_autostart
        return 1
    fi
}

# Enhanced usage function
show_usage() {
    echo "Enhanced Wallpaper Slideshow Script"
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  start            - Start the wallpaper slideshow"
    echo "  stop             - Stop the wallpaper slideshow"
    echo "  restart          - Restart the wallpaper slideshow"
    echo "  status           - Show slideshow status and configuration"
    echo "  enable-autostart - Enable automatic startup on login"
    echo "  disable-autostart- Disable automatic startup"
    echo "  help             - Show this help message"
    echo ""
    echo "Supported Desktop Environments:"
    echo "  • XFCE          • GNOME         • KDE Plasma"
    echo "  • MATE          • Cinnamon      • Unity"
    echo "  • OpenBox       • i3            • Awesome"
    echo "  • BSPWM         • DWM           • LXDE/LXQt"
    echo "  • Budgie        • Pantheon      • Generic (feh/nitrogen)"
    echo ""
    echo "Configuration (edit script to modify):"
    echo "  WALLPAPER_DIR: Directory containing wallpapers"
    echo "  INTERVAL: Time between changes (seconds, default: 300)"
    echo "  RANDOM_ORDER: true for random, false for alphabetical"
    echo ""
    echo "Supported image formats:"
    echo "  JPG, JPEG, PNG, BMP, GIF, TIFF, WebP, SVG, XPM"
    echo ""
    echo "Files created:"
    echo "  Log: $LOG_FILE"
    echo "  PID: $PID_FILE"
    echo "  Autostart: $DESKTOP_FILE"
}

# Main script logic with enhanced command handling
case "${1:-start}" in
    "start")
        if [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
            echo "Wallpaper slideshow is already running (PID: $(cat "$PID_FILE"))"
            echo "Use '$SCRIPT_NAME stop' to stop it first"
            exit 1
        fi
        start_slideshow
        ;;
    "stop")
        stop_slideshow
        ;;
    "restart")
        echo "Restarting wallpaper slideshow..."
        stop_slideshow
        sleep 2
        start_slideshow
        ;;
    "status")
        status_slideshow
        ;;
    "enable-autostart")
        create_autostart
        ;;
    "disable-autostart")
        remove_autostart
        ;;
    "help"|"-h"|"--help")
        show_usage
        ;;
    *)
        echo "Invalid command: $1"
        echo ""
        show_usage
        exit 1
        ;;
esac
